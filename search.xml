<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/04/10/talk1/"/>
      <url>/2023/04/10/talk1/</url>
      
        <content type="html"><![CDATA[<h1 id="碎碎念-1"><a href="#碎碎念-1" class="headerlink" title="碎碎念-1"></a>碎碎念-1</h1><p>好久没更新博客，今天突然想讲点东西，也不知道为啥，想到哪写到哪吧（反正也没人看）</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>可能有人会说，你是不是闲的没事干在这碎碎念呀，其实还挺忙的，而且是因为实在太忙了，反而容易摆烂，感觉之前不是那么忙的时候，我每天的学习时间反而要比现在多，怎么回事呢？</p><p>现在就是肝论文，肝实验咯，系统实现还拖着一大堆进度，论文里面还有一大堆东西要改，每周二还要讲科研创新的东西，我真是x了，真是任务越多越想摆烂，越畏惧做那些任务。</p><p>不管那么多了，睡觉起来就开肝咯，其实主要是迷茫，觉得无论怎么做都做不完，该咋办呢？哎~，想那麽多也莫得啥子用，先把手机ban了再说</p><h2 id="为啥写碎碎念"><a href="#为啥写碎碎念" class="headerlink" title="为啥写碎碎念"></a>为啥写碎碎念</h2><p>其实就是开摆不想干活然后看完了赛马娘，挺有感慨的，又突然想起之前我就想过写自己的2022年度推荐游戏和动漫啥的，干脆就现在想到什么写什么了</p><h2 id="聊聊赛马娘"><a href="#聊聊赛马娘" class="headerlink" title="聊聊赛马娘"></a>聊聊赛马娘</h2><p>今天在看完天国大魔境后想起了赛马娘就把它补完了，一口气看了9集，爽~。</p><p>关注赛马娘主要还是看了泛哥哥的mad，真的看了很多遍这个mad，包括看了很多人的reaction。先聊聊对动画的感受吧，一个是跑的时候确实蛮燃的，还有一个就是情绪调动和渲染确实厉害，至于作画嘛我知道它的手绘live很厉害，但我主要对live其实本身就没啥感觉，这还是容纳在作品整体舒适度里面吧。</p><p>其中单论动画来说第5集讲了麦昆和帝皇的天皇赏之战我倒是没有太多的感觉，后面7，8集对米浴的描写还是蛮有意思的，主要这种我的胜利却破坏了别人的梦想确实没怎么见过，然后米浴的黑色刺客属实是帅到了，不过这一部分最喜欢的部分还是米浴在跑完后无人欢呼最后由她的对手来为她鼓掌，以及成为了波旁的英雄。</p><p>我最喜欢的肯定是第10集了，帝宝要引退，然后她身边的所有人为她做的事情，包括双涡轮挑战她并证明了什么叫永不放弃呀，北黑的护身符呀，训练员的呐喊呀，还有spica队友的表白呀，还有无数为她应援的人们的话语啊，共同加起来真的很让人泪目。</p><p>第11集的贴贴还是很不错的，第12集就一转刀了，帝宝对麦昆的关于奇迹出现的承诺也恰好呼应了前面双涡轮对帝宝永不放弃的承诺；第13集也是演出超神的一集，可惜就是我提前先看了泛哥哥mad中对这一部分的诠释，我确实觉得mad在这里确实部分超越了动画本身，包括在保留那段麦昆视角四周寂静只剩喘息声的基础上加上了超燃的bgm，然后帝皇说完台词后蹬地，歌一顶上来真的爽，最后的点睛之笔更不用说就是真人赛马的场景与赛马娘的结合堪称神来之笔，原解说的一句“东海帝皇，奇迹的复活”真的是令人感概，包括冲过线后的真马的移动和帝宝的移动也是衔接的很好，很舒服。当然这里不是说原片不好的意思，原片会有更多的细节，包括对麦昆视角更多的描写，对整个赛程的描写等等等。</p><p>综上所述，<strong>快去看赛马娘第二季！！！</strong></p><h2 id="聊聊年度动画"><a href="#聊聊年度动画" class="headerlink" title="聊聊年度动画"></a>聊聊年度动画</h2><p>我看的动画确实越来越少了，就2022年而言，我推荐的动画大概就是以下这些：</p><ul><li><p>孤独摇滚：这个不必多说，搞笑和励志齐飞，巨好看，是我最推荐的一部，音乐也贼好听，尤其是第12话的第2首歌，波奇酱社恐的部分也是惟妙惟肖，巨好笑，看就完事了</p></li><li><p>间谍过家家：阿尼亚可爱捏，也是搞笑带着家庭的温馨，黄昏、约尔、阿尼亚、邦德组成的这么一个家庭真的是看起来太舒服了，每个人各自隐藏身份产生的碰撞确实好看，下半部分的suki也是印象深刻，然后两首op,ed真的超高质量，还有就是，阿尼亚可爱捏</p></li><li><p>辉夜3+剧场版：3是去年4月的，剧场版则是刚出的四集，都很值得推荐，3的话每一集都有新活，每一集都能让我开怀大笑，真的是恋爱喜剧的巅峰之作，包括说第5话的rap，早阪和白银的ktv，石燕的一些剧情，反正还有很多，而剧场版的话辉夜的内部人格法庭，小辉夜真的可爱，冰辉直球爆杀，最后恋爱观的碰撞也蛮有意思，搞笑也是维持了一贯的高水准，圣诞交换礼物的手铐确实印象深刻，只是感觉最后进度快了点，略过了很多有意思的剧情</p></li><li><p>鬼灭之刃花街篇：这部倒是没那么推荐，主要就是ufo最后的打戏做的太帅了，前面的文戏确实拖沓，我都是倍速看的，鬼灭倒是符合我脑内妄想的中二设定</p></li><li><p>高木同学3+剧场版：这个甜甜甜就完事了，我真的是看的在床上扭成蛆了，还有后面的剧场版，西片终于直球了一波，高木和西片的互动确实有意思</p></li></ul><p>大概就上面这些了，我看的确实少呀，包括灵能百分百，死神，更衣人偶等佳片都没看</p><h2 id="聊聊漫画"><a href="#聊聊漫画" class="headerlink" title="聊聊漫画"></a>聊聊漫画</h2><p>突然又想起可以聊聊漫画，主要就是分享一下我看的漫画吧</p><ul><li><p>外天楼：石黑正树的短篇，几个看似不相关的故事却联系在一起构建出了人和机器生命共存的诡异世界观，里面的伏笔与反转确实妙，整个世界观也很有意思，其中人伦的问题真的惊讶</p></li><li><p>夏日重现：一天看完，看的贼爽，中后期基本上就是奇幻战斗了，前面的悬疑氛围真的重，包括两个女二，男主每一次轮回的智斗真的看爽，后面就是看战斗了</p></li><li><p>亲爱的你包含杀意：这个前期的氛围真的挺爽，男主双重人格，那种一觉醒来发现有几天被跳过了，你都不知道这几天你干了什么，还有就是身边的人的反转真的爽，最让我印象深刻的应该是那个警察的一幕，中间那个女主暴露自己之后我都不知道要怎么画了，不过整体还是维持了很高的水准，最后犯人的揭晓也蛮有意思的</p></li></ul><h2 id="聊聊看的视频和直播"><a href="#聊聊看的视频和直播" class="headerlink" title="聊聊看的视频和直播"></a>聊聊看的视频和直播</h2><p>主要最近看泛哥哥的视频和直播都很多，视频方面整活真的越来越让人眼前一黑了，更多的想聊的还是直播方面，直播游戏主要看了泛哥哥播的一些视觉小说，包括人狼村、ever17，也看了很多次杂谈回，以及一些泛哥哥对视频的reaction也蛮有意思，包括mad大赛的录播，生日回，看孤独摇滚，看唐诱等等</p><p>还有一些印象比较深的包括散人的蓝鲸岛，桀哥的各种视频，stn快报，还有各种mad等等</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>先讲到这里吧，游戏什么的先不写了，摸了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql学习记录（二）</title>
      <link href="/2022/03/15/database2/"/>
      <url>/2022/03/15/database2/</url>
      
        <content type="html"><![CDATA[<h1 id="sql学习记录（二）"><a href="#sql学习记录（二）" class="headerlink" title="sql学习记录（二）"></a>sql学习记录（二）</h1><p>腹泻式更新了属于是</p><p>（一）看这里：<a href="https://wdstql.github.io/2022/03/10/database1/">sql学习记录（一）</a></p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p>用于将结果集进行分组，往往结合各种sql函数使用，要注意分组的先后顺序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#筛选出各subject中最早的年份</span><span class="token keyword">select</span> subject<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>yr<span class="token punctuation">)</span><span class="token keyword">from</span> nobel<span class="token keyword">group</span> <span class="token keyword">by</span> subject<span class="token comment">#Show the number of different winners for each subject.</span><span class="token keyword">select</span> subject<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> winner<span class="token punctuation">)</span><span class="token keyword">from</span> nobel<span class="token keyword">group</span> <span class="token keyword">by</span> subject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><p>having相当于用在groupby后的where，要注意的是条件筛选的顺序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> winner<span class="token keyword">from</span> nobel<span class="token keyword">group</span> <span class="token keyword">by</span> winner<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span> <span class="token comment">#看每个分组的数目是否大于一</span><span class="token comment">#下面这个是先把yr>=2000先选出，再按年份，学科进行分组</span><span class="token keyword">select</span> yr<span class="token punctuation">,</span>subject<span class="token keyword">from</span> nobel<span class="token keyword">where</span> yr<span class="token operator">>=</span><span class="token number">2000</span><span class="token keyword">group</span> <span class="token keyword">by</span> yr<span class="token punctuation">,</span>subject<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="限制返回数据记录数"><a href="#限制返回数据记录数" class="headerlink" title="限制返回数据记录数"></a>限制返回数据记录数</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token comment">#前两条</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">50</span> <span class="token keyword">PERCENT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons<span class="token comment">#前50%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>适用于mysql，在限制返回记录数时，往往排序orderby很重要，而且配合Offset使用，offset指偏移，即排除前几行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#返回前5行</span><span class="token keyword">SELECT</span>     employee_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token keyword">FROM</span>    employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> first_name<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">#跳过前三行，获取之后的5行</span><span class="token keyword">SELECT</span>     employee_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token keyword">FROM</span>    employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> first_name<span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token keyword">OFFSET</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">#mysql环境下，意思同上</span><span class="token keyword">SELECT</span>     employee_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token keyword">FROM</span>    employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> first_name<span class="token keyword">LIMIT</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">#获取全公司薪水第二高的员工</span><span class="token keyword">SELECT</span>     employee_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span>    employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span><span class="token keyword">LIMIT</span> <span class="token number">1</span> <span class="token keyword">OFFSET</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>格式不一样，但是用法同上</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#语法</span><span class="token keyword">OFFSET</span> offset_rows &#123; <span class="token keyword">ROW</span> <span class="token operator">|</span> <span class="token keyword">ROWS</span> &#125;<span class="token keyword">FETCH</span> &#123; <span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">NEXT</span> &#125; <span class="token punctuation">[</span> fetch_rows <span class="token punctuation">]</span> &#123; <span class="token keyword">ROW</span> <span class="token operator">|</span> <span class="token keyword">ROWS</span> &#125; ONLY<span class="token comment">#&#123;&#125;内的词可互相替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>     employee_id<span class="token punctuation">,</span>     first_name<span class="token punctuation">,</span>     last_name<span class="token punctuation">,</span>     salary<span class="token keyword">FROM</span> employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>     salary <span class="token keyword">DESC</span><span class="token keyword">OFFSET</span> <span class="token number">0</span> <span class="token keyword">ROWS</span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">1</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="case…when"><a href="#case…when" class="headerlink" title="case…when.."></a>case…when..</h2><p>相当于if…else</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    STUDENT_NAME<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">'不及格'</span>        <span class="token keyword">WHEN</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">AND</span> score <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">THEN</span> <span class="token string">'及格'</span>        <span class="token keyword">WHEN</span> score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token keyword">THEN</span> <span class="token string">'优秀'</span>        <span class="token keyword">ELSE</span> <span class="token string">'异常'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> REMARK <span class="token comment">#注意基本格式，而且往往会给个别名</span><span class="token keyword">FROM</span>    <span class="token keyword">TABLE</span><span class="token comment">#下面这个例子也说明了case的作用往往是相当于部分where</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> STU_SEX <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> MALE_COUNT<span class="token punctuation">,</span> <span class="token comment">#男生个数</span><span class="token function">SUM</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> STU_SEX <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> FEMALE_COUNT<span class="token punctuation">,</span><span class="token function">SUM</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> STU_SCORE <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">AND</span> STU_SEX <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> MALE_PASS<span class="token punctuation">,</span><span class="token function">SUM</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> STU_SCORE <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">AND</span> STU_SEX <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> FEMALE_PASS<span class="token keyword">FROM</span> THTF_STUDENTS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>join用于基于一些限制条件连接多个表，以查询数据</p><h3 id="基础join"><a href="#基础join" class="headerlink" title="基础join"></a>基础join</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> player<span class="token keyword">from</span> game <span class="token keyword">join</span> goal <span class="token keyword">on</span> id<span class="token operator">=</span>matchid <span class="token comment">#on后加限制条件，如果不加就相当于两个表做笛卡尔积，即每一行都连接</span><span class="token keyword">where</span> stadium<span class="token operator">=</span><span class="token string">'National Stadium, Warsaw'</span><span class="token comment">#下面是查POL得分的比赛</span><span class="token keyword">SELECT</span> matchid<span class="token punctuation">,</span> mdate<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> game <span class="token keyword">JOIN</span> goal <span class="token keyword">ON</span> matchid <span class="token operator">=</span> id  <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>team1 <span class="token operator">=</span> <span class="token string">'POL'</span> <span class="token operator">OR</span> team2 <span class="token operator">=</span> <span class="token string">'POL'</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span> matchid<span class="token punctuation">,</span>mdate<span class="token comment">#注意这里分组的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h3><p>left join是指在根据条件连接两个表的时候，会在左表中返回所有的行，那些没有在右表中匹配成功的行会留空。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> matchid<span class="token punctuation">,</span>mdate<span class="token punctuation">,</span>team1<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> teamid<span class="token operator">=</span>team1 <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> score1<span class="token punctuation">,</span> <span class="token comment">#顺便看看case</span>team2<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> teamid<span class="token operator">=</span>team2 <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> score2  <span class="token keyword">FROM</span> game <span class="token keyword">left</span> <span class="token keyword">JOIN</span> goal <span class="token keyword">ON</span> matchid <span class="token operator">=</span> id <span class="token comment">#用leftjoin是因为有要统计那些没得分的比赛</span><span class="token keyword">group</span> <span class="token keyword">by</span> matchid<span class="token punctuation">,</span>mdate<span class="token punctuation">,</span> team1<span class="token punctuation">,</span>team2<span class="token keyword">order</span> <span class="token keyword">by</span> mdate<span class="token punctuation">,</span> matchid<span class="token punctuation">,</span> team1<span class="token punctuation">,</span>team2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h3><p>把left join中的左表换成右表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Persons<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> Persons<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> Orders<span class="token punctuation">.</span>OrderNo<span class="token keyword">FROM</span> Persons<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> Orders<span class="token comment">#包括那些没人订购的订单</span><span class="token keyword">ON</span> Persons<span class="token punctuation">.</span>Id_P<span class="token operator">=</span>Orders<span class="token punctuation">.</span>Id_P<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Persons<span class="token punctuation">.</span>LastName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h3><p>left join和right join的结合（不是笛卡尔积）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Persons<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> Persons<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> Orders<span class="token punctuation">.</span>OrderNo<span class="token keyword">FROM</span> Persons<span class="token keyword">FULL</span> <span class="token keyword">JOIN</span> Orders<span class="token keyword">ON</span> Persons<span class="token punctuation">.</span>Id_P<span class="token operator">=</span>Orders<span class="token punctuation">.</span>Id_P<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Persons<span class="token punctuation">.</span>LastName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两个表以上的join"><a href="#两个表以上的join" class="headerlink" title="两个表以上的join"></a>两个表以上的join</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询与Art Garfunkel共事过的演员</span><span class="token keyword">SELECT</span> <span class="token keyword">distinct</span> name <span class="token keyword">FROM</span>  movie <span class="token keyword">JOIN</span> casting <span class="token keyword">ON</span> movie<span class="token punctuation">.</span>id<span class="token operator">=</span>movieid <span class="token comment">#注意这里的格式</span>        <span class="token keyword">JOIN</span> actor   <span class="token keyword">ON</span> actorid<span class="token operator">=</span>actor<span class="token punctuation">.</span>id<span class="token keyword">where</span> movieid <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> movieid <span class="token keyword">FROM</span>  movie <span class="token keyword">JOIN</span> casting <span class="token keyword">ON</span> movie<span class="token punctuation">.</span>id<span class="token operator">=</span>movieid        <span class="token keyword">JOIN</span> actor   <span class="token keyword">ON</span> actorid<span class="token operator">=</span>actor<span class="token punctuation">.</span>id<span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Art Garfunkel'</span><span class="token punctuation">)</span> <span class="token operator">and</span> name<span class="token operator">&lt;></span><span class="token string">'Art Garfunkel'</span><span class="token comment">#查询Julie Andrews参演过的电影的主角</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>name <span class="token keyword">FROM</span>  movie <span class="token keyword">JOIN</span> casting <span class="token keyword">ON</span> movie<span class="token punctuation">.</span>id<span class="token operator">=</span>movieid        <span class="token keyword">JOIN</span> actor   <span class="token keyword">ON</span> actorid<span class="token operator">=</span>actor<span class="token punctuation">.</span>id<span class="token keyword">WHERE</span> movieid <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> movieid <span class="token keyword">FROM</span>  movie <span class="token keyword">JOIN</span> casting <span class="token keyword">ON</span> movie<span class="token punctuation">.</span>id<span class="token operator">=</span>movieid        <span class="token keyword">JOIN</span> actor   <span class="token keyword">ON</span> actorid<span class="token operator">=</span>actor<span class="token punctuation">.</span>id<span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Julie Andrews'</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> title<span class="token punctuation">,</span>name<span class="token punctuation">,</span>ord<span class="token keyword">HAVING</span> ord<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="natural-join"><a href="#natural-join" class="headerlink" title="natural join"></a>natural join</h3><p>将多个表中名字和数据类型的属性列相等的连接起来，相当于自动给你加了限制条件，注意的是如果存在多个名字和数据类型的属性，需要满足这些属性同时相等才能被连接起来。</p><p><img src="https://cdn.jsdelivr.net/gh/wdstql/blog_image/20220314182413.png"></p><h3 id="cross-join"><a href="#cross-join" class="headerlink" title="cross join"></a>cross join</h3><p>生成两个或多个表的笛卡尔积。（直接用逗号默认是笛卡尔积）</p><p><img src="https://cdn.jsdelivr.net/gh/wdstql/blog_image/20220315102716.png"></p><p>而且有m+n列。</p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>我们将一张表连接到自身来评估同一个表中其他行的行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#展现上下级关系，用left join是因为最上级没有manager</span><span class="token keyword">SELECT</span>     CONCAT<span class="token punctuation">(</span>e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span> <span class="token keyword">as</span> employee<span class="token punctuation">,</span>    CONCAT<span class="token punctuation">(</span>m<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span> <span class="token keyword">as</span> manager <span class="token keyword">FROM</span>    employees e        <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span>    employees m <span class="token keyword">ON</span> m<span class="token punctuation">.</span>employee_id <span class="token operator">=</span> e<span class="token punctuation">.</span>manager_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> manager<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多查询组合"><a href="#多查询组合" class="headerlink" title="多查询组合"></a>多查询组合</h2><p>用下面的运算符来连接多个查询结果，要注意的是这多个查询结果间必须拥有相同数量的列。列也必须拥有相似的数据类型，同时，每条 SELECT 语句中的列的顺序必须相同。</p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>取并集，相当于or</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> E_Name <span class="token keyword">FROM</span> Employees_China<span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token comment">#加上all代表相同的值可重复列出</span><span class="token keyword">SELECT</span> E_Name <span class="token keyword">FROM</span> Employees_USA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Intersect"><a href="#Intersect" class="headerlink" title="Intersect"></a>Intersect</h3><p>取交集，相当于and</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Txn_Date <span class="token keyword">FROM</span> Store_Information<span class="token keyword">INTERSECT</span><span class="token keyword">SELECT</span> Txn_Date <span class="token keyword">FROM</span> Internet_Sales<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="except-minus"><a href="#except-minus" class="headerlink" title="except/minus"></a>except/minus</h3><p>两者意思相同，minus是Oracle用的，A except B相当于在A的结果集中除去B的结果集，和not exists配合有奇效</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#找银行中有账户但无贷款的人</span><span class="token punctuation">(</span><span class="token keyword">select</span> customer_name <span class="token keyword">from</span> depositor<span class="token punctuation">)</span> <span class="token keyword">except</span><span class="token punctuation">(</span><span class="token keyword">select</span> customer_name <span class="token keyword">from</span> borrower<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于嵌套查询的一些补充"><a href="#关于嵌套查询的一些补充" class="headerlink" title="关于嵌套查询的一些补充"></a>关于嵌套查询的一些补充</h2><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>如果unique内结果中不包含重复行，则返回true</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#找出2009年只开过一次的课</span><span class="token keyword">select</span> I<span class="token punctuation">.</span>course id<span class="token keyword">from</span> course <span class="token keyword">as</span> T<span class="token keyword">where</span> <span class="token keyword">unique</span> <span class="token punctuation">(</span><span class="token keyword">select</span> R<span class="token punctuation">.</span>course_id<span class="token keyword">from</span> section <span class="token keyword">as</span> R<span class="token keyword">where</span> T<span class="token punctuation">.</span>course id<span class="token operator">=</span>R<span class="token punctuation">.</span>course_id<span class="token operator">and</span> R<span class="token punctuation">.</span><span class="token keyword">year</span> <span class="token number">2009</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>用于临时给一条查询的结果生成了一个表，以便于重复使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> max_budget <span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>budget<span class="token punctuation">)</span> <span class="token keyword">from</span> department<span class="token punctuation">)</span><span class="token keyword">select</span> budget<span class="token keyword">from</span> department<span class="token punctuation">,</span>max budget<span class="token keyword">where</span> department<span class="token punctuation">.</span>budget max_budget<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p>当exists内的结果不为空集，则返回true，not exists则相反</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#找至少教一名学生的instrutor</span><span class="token keyword">select</span> ID<span class="token keyword">from</span> instructor <span class="token keyword">as</span> S<span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">from</span> advisor <span class="token keyword">as</span> T <span class="token keyword">where</span> S<span class="token punctuation">.</span>ID<span class="token operator">=</span>T<span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点用法：用not exists来判断一些集合是否满足包含关系，比如当A包含于B，则代表当A-B为空集，因此用not exists和except配合</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> customer_name<span class="token keyword">from</span> depositor <span class="token keyword">as</span> d1<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> branch_name <span class="token keyword">from</span> branch <span class="token keyword">where</span> branch_city<span class="token operator">=</span><span class="token string">'Brooklyn'</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span><span class="token keyword">select</span> branch_name <span class="token keyword">from</span> account <span class="token keyword">as</span> a <span class="token punctuation">,</span>depositor <span class="token keyword">as</span> d2 <span class="token keyword">where</span> d2<span class="token punctuation">.</span>customer_name<span class="token operator">=</span>d1<span class="token punctuation">.</span>customer_name <span class="token operator">and</span> a<span class="token punctuation">.</span>account_name<span class="token operator">=</span>d2<span class="token punctuation">.</span>account_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个例子是找出在位于“Brooklyn”的所有支行都有账户的所有客户，这题的切入点就在于，既然要找在位于“Brooklyn”的所有支行都有账户的客户，那么位于“Brooklyn”的所有支行这个集合必包含于该客户办的所有账户的所有支行这个集合，这里相当于一个二层循环，外层循环提供当前客户的名字，内层循环去找这个客户办的所有账户的所有支行。下面再给出一个例子自己悟：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> S<span class="token punctuation">.</span>ID<span class="token punctuation">,</span>S<span class="token punctuation">.</span>name<span class="token keyword">from</span> student <span class="token keyword">as</span> S<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token keyword">select</span> course_id <span class="token keyword">from</span> course <span class="token keyword">where</span> dept name <span class="token operator">=</span><span class="token string">'Biology'</span><span class="token punctuation">)</span>                <span class="token keyword">except</span>                <span class="token punctuation">(</span><span class="token keyword">select</span> I<span class="token punctuation">.</span>course_id <span class="token keyword">from</span> takes <span class="token keyword">as</span> T <span class="token keyword">where</span> S<span class="token punctuation">.</span>ID<span class="token operator">=</span>T<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>                <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于NULL的一些补充"><a href="#关于NULL的一些补充" class="headerlink" title="关于NULL的一些补充"></a>关于NULL的一些补充</h2><h3 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h3><p>虽然（一）已经提到过了，但写到这才真正发现它的用法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">COALESCE</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">NULL</span><span class="token keyword">COALESCE</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> y <span class="token keyword">if</span> x <span class="token operator">is</span> <span class="token boolean">NULL</span> <span class="token operator">and</span> y <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">NULL</span><span class="token keyword">COALESCE</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> z <span class="token keyword">if</span> x <span class="token operator">and</span> y are <span class="token boolean">NULL</span> but z <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">NULL</span><span class="token keyword">COALESCE</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token keyword">if</span> x <span class="token operator">and</span> y <span class="token operator">and</span> z are <span class="token keyword">all</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#例子</span><span class="token keyword">SELECT</span> teacher<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'None'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> teacher <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept           <span class="token keyword">ON</span> <span class="token punctuation">(</span>teacher<span class="token punctuation">.</span>dept<span class="token operator">=</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-1"><a href="#join-1" class="headerlink" title="join"></a>join</h3><p>left或者right join都有可能会造成查询结果中NULL值的存在，要注意对它们的处理，还有count的计数此时最好不要用count(*)，因为会把null值统计进去</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://sqlzoo.net/wiki/Using_GROUP_BY_and_HAVING.">sqlzoo</a>：强烈推荐的一个可以一边练习一边学习的sql学习网站，<del>建议对基础语法有一定了解后来使用</del></p><p><a href="https://www.w3school.com.cn/sql/index.asp">w3school</a>：十分著名的w3school，用于了解sql基础语法</p><p><a href="https://www.yiibai.com/sql">易百教程</a>：跟w3school差不多，但个人觉得讲的更为详细一点</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql学习记录（一）</title>
      <link href="/2022/03/10/database1/"/>
      <url>/2022/03/10/database1/</url>
      
        <content type="html"><![CDATA[<h1 id="sql学习记录（一）"><a href="#sql学习记录（一）" class="headerlink" title="sql学习记录（一）"></a>sql学习记录（一）</h1><p>好像好久没更新了，哎…….学业压人啊（<del>绝对不是因为hades太好玩了</del>）</p><p>本系列主要用于记录我在sql方面的学习，主要是想到哪，写到哪</p><h2 id="sql学习网站推荐"><a href="#sql学习网站推荐" class="headerlink" title="sql学习网站推荐"></a>sql学习网站推荐</h2><p>在开始之前，我要先介绍一下我学习sql使用到的一些网站。</p><p><a href="https://sqlzoo.net/wiki/Using_GROUP_BY_and_HAVING.">sqlzoo</a>：强烈推荐的一个可以一边练习一边学习的sql学习网站，建议对基础语法有一定了解后来使用</p><p><a href="https://www.w3school.com.cn/sql/index.asp">w3school</a>：十分著名的w3school，用于了解sql基础语法</p><p><a href="https://www.yiibai.com/sql">易百教程</a>：跟w3school差不多，但个人觉得讲的更为详细一点</p><h2 id="基础查询子句"><a href="#基础查询子句" class="headerlink" title="基础查询子句"></a>基础查询子句</h2><h3 id="select…from"><a href="#select…from" class="headerlink" title="select…from.."></a>select…from..</h3><p>查询语法的基础，select后加要查询的东西，from后加表名。（注意sql语法是不区分大小写的，写sql脚本的时候语句后加分号，一般查询不用加）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> gdp<span class="token operator">/</span>population <span class="token keyword">FROM</span> world x<span class="token punctuation">;</span> <span class="token comment"># 将world表定义别名为x，从x中选出population</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> world x<span class="token punctuation">;</span> <span class="token comment">#星号代表全部属性都取出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意一个select返回的是数据对应的行</p><p>而且select后面是可以接数学表达式或者一些sql函数的</p><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>where子句同样是查询的重中之重，用于定义查询数据的条件，一般在where中的判断条件包括三种</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">&lt;></span> <span class="token string">'France'</span><span class="token punctuation">;</span> <span class="token comment">#用运算符，&lt;>意思是不等于，也可用！=</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> population <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'Brazil'</span><span class="token punctuation">,</span> <span class="token string">'Russia'</span><span class="token punctuation">,</span> <span class="token string">'India'</span><span class="token punctuation">,</span> <span class="token string">'China'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 用in来定义name所能取的有限值</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> area <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> area <span class="token operator">BETWEEN</span> <span class="token number">250000</span> <span class="token operator">AND</span> <span class="token number">300000</span><span class="token punctuation">;</span>  <span class="token comment">#between...and...确定范围，但between在不同数据库对于是否能取到边界值不同，所以我一般直接用大于和小于</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>一般用于where子句中字符串的匹配，类似正则表达式，匹配时使用like</p><ul><li>%表示匹配任意长度的任意字符</li><li>_表示匹配一个任意字符</li><li>[charlist]匹配字符列中的任何单一字符</li><li>[^charlist]或[!charlist]匹配不在字符列中的任何单一字符</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> world <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%United%'</span><span class="token punctuation">;</span><span class="token comment">#找包含United的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> FirstName <span class="token operator">LIKE</span> <span class="token string">'_eorge'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> City <span class="token operator">LIKE</span> <span class="token string">'[ALN]%'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> City <span class="token operator">LIKE</span> <span class="token string">'[!ALN]%'</span><span class="token comment">#找不以A，L，N开头的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="and-or-not"><a href="#and-or-not" class="headerlink" title="and,or,not"></a>and,or,not</h3><p>这三个主要是用于where子句中的条件判断，即与或非</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> population<span class="token punctuation">,</span> area <span class="token keyword">from</span> world<span class="token keyword">where</span> <span class="token punctuation">(</span>area<span class="token operator">></span><span class="token number">3000000</span> <span class="token operator">or</span> population<span class="token operator">></span><span class="token number">250000000</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> <span class="token punctuation">(</span>area<span class="token operator">></span><span class="token number">3000000</span> <span class="token operator">and</span> population<span class="token operator">></span><span class="token number">250000000</span><span class="token punctuation">)</span><span class="token comment">#选area>3000000或population>250000000但是不要两个都满足</span><span class="token comment">#注意括号的优先级是最高的</span><span class="token keyword">SELECT</span> name   <span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'B%'</span>  <span class="token operator">AND</span> name <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">'%a%'</span> <span class="token comment">#可以not like和not in</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h3><p>用于对结果进行排序，默认是ASC升序，降序用desc</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> winner<span class="token punctuation">,</span> yr<span class="token punctuation">,</span>subject <span class="token keyword">from</span> nobel<span class="token keyword">where</span> winner <span class="token operator">like</span> <span class="token string">'Sir%'</span><span class="token keyword">order</span> <span class="token keyword">by</span> yr <span class="token keyword">desc</span><span class="token punctuation">,</span>winner <span class="token keyword">asc</span><span class="token comment">#下面要注意的是排序子句中要注意先后顺序，数据先按照前面的排列再在不违反前面的基础上执行后面的</span><span class="token keyword">SELECT</span> winner<span class="token punctuation">,</span> subject  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> yr<span class="token operator">=</span><span class="token number">1984</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> subject <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'Physics'</span><span class="token punctuation">,</span><span class="token string">'Chemistry'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>subject<span class="token punctuation">,</span>winner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>用于排除重复值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> continent<span class="token keyword">from</span> world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="sql函数"><a href="#sql函数" class="headerlink" title="sql函数"></a>sql函数</h2><h3 id="round取整"><a href="#round取整" class="headerlink" title="round取整"></a>round取整</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>population<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>gdp<span class="token operator">/</span><span class="token number">1000000000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> world<span class="token keyword">where</span> continent<span class="token operator">=</span><span class="token string">'South America'</span><span class="token punctuation">;</span><span class="token comment">#保留两位小数</span><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>gdp<span class="token operator">/</span>population<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">from</span> world <span class="token keyword">where</span> gdp<span class="token operator">>=</span><span class="token number">1000000000000</span><span class="token comment">#保留到千分位，即百位十位个位都用0替代</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="length取长度"><a href="#length取长度" class="headerlink" title="length取长度"></a>length取长度</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>capital   <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> LENGTH<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">=</span>LENGTH<span class="token punctuation">(</span>capital<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="left"><a href="#left" class="headerlink" title="left"></a>left</h3><p>取出字符串前n位</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> capital<span class="token keyword">FROM</span> world<span class="token keyword">where</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">left</span><span class="token punctuation">(</span>capital<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> name<span class="token operator">!=</span>capital<span class="token comment">#取首字母相同的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>用于多个字符串连接，若其中有一个是null，则结果为null</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>population<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">select</span> population <span class="token keyword">from</span> world <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Germany'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token keyword">from</span> world <span class="token keyword">where</span> continent<span class="token operator">=</span><span class="token string">'Europe'</span> <span class="token operator">and</span> population<span class="token operator">></span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>附：concat_ws(separator, str1, str2, …)，功能同上，只是可以指定分隔符</p><h3 id="avg-sum-count"><a href="#avg-sum-count" class="headerlink" title="avg,sum,count"></a>avg,sum,count</h3><p>如字面意思，而且都支持distinct选项，但注意avg和sum会忽略null值，而count(*)或count(1)不会（count(某一属性)会）。</p><p>但是若avg，sum的对象没有记录，则会返回null值，此时建议使用<code>ISNULL(sum(对象),0)</code>将null替换为0</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Customer <span class="token keyword">FROM</span> Orders<span class="token keyword">WHERE</span> OrderPrice<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>OrderPrice<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Orders<span class="token punctuation">)</span><span class="token comment">#找到OrderPrice高于平均值的顾客</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">where</span> department_id<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#代表获取该表满足条件的行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>事实上这几个函数在分组中很有作用，但由于篇幅原因，下次一定</p><h3 id="max-min"><a href="#max-min" class="headerlink" title="max,min"></a>max,min</h3><p>如字面意思</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token comment">#既支持数值也支持文本,自动忽略null值，不支持distinct</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token comment">#同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><p>select出的结果可以作为一个值用于另一个查询的where子句中来作为比较条件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#作为值</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> continent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> continent <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'Brazil'</span><span class="token punctuation">)</span><span class="token comment">#作为列表</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> continent <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> continent <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> continent <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'Brazil'</span> <span class="token operator">OR</span> name<span class="token operator">=</span><span class="token string">'Mexico'</span><span class="token punctuation">)</span><span class="token comment">#还可以放在select后运算</span><span class="token keyword">SELECT</span> population<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'United Kingdom'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'China'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ALL运算符"><a href="#ALL运算符" class="headerlink" title="ALL运算符"></a>ALL运算符</h3><p>将单个值和子查询中所有值进行比较</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> population <span class="token operator">></span> <span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> continent<span class="token operator">=</span><span class="token string">'Europe'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这也可以作为寻找某个范围内最大值的方法之一</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> continent<span class="token punctuation">,</span> name<span class="token punctuation">,</span> area <span class="token keyword">FROM</span> world x  <span class="token keyword">WHERE</span> area <span class="token operator">>=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> area <span class="token keyword">FROM</span> world y        <span class="token keyword">WHERE</span> y<span class="token punctuation">.</span>continent<span class="token operator">=</span>x<span class="token punctuation">.</span>continent <span class="token operator">AND</span> area<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#代表寻找每个洲面积最大的国家，这种别名的方法很常用</span><span class="token comment">#下面这个是找全部国家人口都少于25000000的大洲</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> population <span class="token keyword">from</span> world x <span class="token keyword">where</span> <span class="token number">25000000</span><span class="token operator">>=</span><span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">select</span> population <span class="token keyword">from</span> world y <span class="token keyword">where</span> y<span class="token punctuation">.</span>continent<span class="token operator">=</span>x<span class="token punctuation">.</span>continent<span class="token punctuation">)</span><span class="token comment">#下面这个是找比同一大洲其他国家人口多三倍以上的国家</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>continent <span class="token keyword">from</span> world x <span class="token keyword">where</span> population<span class="token operator">></span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token operator">*</span>population <span class="token keyword">from</span> world y <span class="token keyword">where</span> y<span class="token punctuation">.</span>continent<span class="token operator">=</span>x<span class="token punctuation">.</span>continent <span class="token operator">and</span> y<span class="token punctuation">.</span>name<span class="token operator">&lt;></span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="any-some"><a href="#any-some" class="headerlink" title="any/some"></a>any/some</h3><p>all是子查询出的所有值，any则是其中任意一组值，也就是比较运算中，只要等式另一边比子查询任意一组值满足条件即可</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span> <span class="token comment">#找出所有工资等于平均工资的员工</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="NULL-这位更是重量级"><a href="#NULL-这位更是重量级" class="headerlink" title="NULL(这位更是重量级)"></a>NULL(这位更是重量级)</h2><p>null在其他编程语言中往往是作为空值，但是在sql中，null的意思是<strong>未知值</strong>。在一些字段未知时，我们可以给其赋予null。</p><ul><li><p>null不能使用比较运算符，如&gt;,&lt;,=等，否则将返回null，因为是未知，所以不会有数据返回</p></li><li><p>当我们想要查询哪些行的某个属性是否为空值时，应使用<code>is null</code>或<code>is not null</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> SOME_TABLEWHERE SOME_COLUMN <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="false与null"><a href="#false与null" class="headerlink" title="false与null"></a>false与null</h3><p>麻烦来了，看好false和null的区别：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> world <span class="token keyword">where</span> <span class="token operator">not</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#因为1=0为false，则not(1=0)为true，返回所有行</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> world <span class="token keyword">where</span> <span class="token operator">not</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#1=null可能为true或者false，因为null是未知，则1=null为null，not(1=null)也是null，则不返回任何值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="null与not-in"><a href="#null与not-in" class="headerlink" title="null与not in"></a>null与not in</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> SOME_TABLE <span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token comment">#显然正确</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> SOME_TABLE <span class="token keyword">WHERE</span> <span class="token number">5</span> <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token comment">#牛逼的地方在于null是未知，所以null有可能是5，则这个where后返回null，最后不返回任何值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="null与null"><a href="#null与null" class="headerlink" title="null与null"></a>null与null</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual <span class="token keyword">where</span> <span class="token boolean">null</span><span class="token operator">=</span><span class="token boolean">null</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual <span class="token keyword">where</span> <span class="token boolean">null</span><span class="token operator">&lt;></span><span class="token boolean">null</span><span class="token comment">#上面的都不会返回任何值，用未知的思想就是null可能等于null，所以都返回未知</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因此若表中可能存在null时，比较运算符不能随便乱用，最好加入一些限制条件或者使用isnull函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> population <span class="token operator">></span> <span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> continent<span class="token operator">=</span><span class="token string">'Europe'</span> <span class="token operator">and</span> population<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#population>0是避免一些人口记录为null的国家</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>Weight<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> Production<span class="token punctuation">.</span>Product<span class="token punctuation">;</span>  <span class="token comment">#遇到null就将其替换为50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意isnull函数是微软数据库特有的，相同作用的函数在oracle中叫NVL，在mysql中为IFNULL或COALESCE</p><p>NULL这一部分参考了这篇文章：<a href="https://www.cnblogs.com/gaohanghang/p/12636957.html">SQL查询中的NULL值</a></p><h2 id="一些小tips"><a href="#一些小tips" class="headerlink" title="一些小tips"></a>一些小tips</h2><ul><li>字符串中想打出单引号时需打两个单引号</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2021/10/25/quickmul/"/>
      <url>/2021/10/25/quickmul/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊快速幂"><a href="#聊聊快速幂" class="headerlink" title="聊聊快速幂"></a>聊聊快速幂</h1><p>今天leetcode正好刷到了，就来写一下吧</p><h2 id="快速幂的定义"><a href="#快速幂的定义" class="headerlink" title="快速幂的定义"></a>快速幂的定义</h2><p>先放上原题：<a href="https://leetcode-cn.com/problems/powx-n/">leetcode50pow（x,n）</a></p><p>顾名思义，快速幂就是一种快速求幂的方法，它能在$O(logn)$时间内求出一个底数的幂，比起朴素的$O(n)$做法快了相当多。关键的是，这种方法适用于相当多的题目中，在算$a^n$时，只要a的数据类型支持乘法结合律就可以用，如<strong>矩阵</strong>、<strong>高精度整数</strong>，甚至是一个<strong>dp转移的状态</strong>，以降低时间复杂度。</p><h2 id="快速幂的两种解法"><a href="#快速幂的两种解法" class="headerlink" title="快速幂的两种解法"></a>快速幂的两种解法</h2><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><p>递归解法的代码较为简单，缺点是空间复杂度较高，较为耗费栈空间。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">_myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token function">_myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原理就是分治</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span>ans<span class="token operator">*</span>ans<span class="token operator">*</span>x<span class="token operator">:</span>ans<span class="token operator">*</span>ans<span class="token punctuation">;</span><span class="token comment">//判断奇偶</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token function">_myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">//防止除数是0</span>        <span class="token keyword">return</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1.0</span><span class="token operator">/</span>ans<span class="token operator">:</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为$O(logn)$，空间复杂度为$O(n)$</p><h3 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h3><p>考虑到栈空间的损耗，可以采用更为巧妙的迭代解法。</p><p>递归解法可以通过判断奇偶来决定是否乘上x,但是迭代解法却难以判断这一点，所以我们需要转换思路，从幂数的二进制表示入手。（这里其实建立在我看过解法之后得出的结论….）</p><p>不妨假设我们要计算$x^{39}$，幂数为39，39的二进制表示为100111，而这代表$39=2^5+2^2+2^1+2^0$,因此$$x^{39}=x^{2^5+2^2+2^1+2^0}=x^{2^5}*x^{2^2}*x^{2^1}*x^{2^0}$$</p><p>这告诉我们只要按幂数二进制的每一位来迭代，只要该位为1，就代表此位对答案有贡献，要注意的是随着幂数的迭代，贡献也要不断迭代。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">_myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里要注意用正数来算</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>ans<span class="token operator">*=</span>x<span class="token punctuation">;</span><span class="token comment">//判断该位是否为1</span>            x<span class="token operator">*=</span>x<span class="token punctuation">;</span><span class="token comment">//贡献迭代</span>            n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//不断除于2，以每次通过&amp;来判断最后一位</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token function">_myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1.0</span><span class="token operator">/</span>ans<span class="token operator">:</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>在多数题目中，题目常常会要求对一个大素数取模，这是因为计算结果可能会非常巨大，但是如果在这里用高精度又过于麻烦。这时我们的快速幂也应当进行取模，此时应当注意，原则是<strong>步步取模</strong>，如果MOD较大，还应当<strong>开long long</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//递归快速幂（对大素数取模版本）</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOD</span> <span class="token expression"><span class="token number">1000000007</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">qpow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        ll temp <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token keyword">return</span> temp <span class="token operator">*</span> temp <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码来源：https://zhuanlan.zhihu.com/p/95902286</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速幂拓展"><a href="#快速幂拓展" class="headerlink" title="快速幂拓展"></a>快速幂拓展</h2><h2 id="快速乘（加法）"><a href="#快速乘（加法）" class="headerlink" title="快速乘（加法）"></a>快速乘（加法）</h2><p>题目链接：<a href="https://leetcode-cn.com/problems/divide-two-integers">leetcode29两数相除</a></p><p>此题就是模拟两数相除，看似简单，事实上对于细节的要求相当高。</p><p>基本思路：为防止溢出，于是将两数都变为负数来处理（如果用longlong可以在以正数来处理），假设被除数为a，除数为b，答案为ans（正数），则有$ans*b\ge{a},(ans+1)*b\le{a}$。又a,b都为整数，所以ans一定在$[0,\abs{a}]$范围内，我们只要在此区间内<strong>二分</strong>即可，判断时用<strong>加法来实现乘法</strong>，即替换快速幂中的乘法。听起来简单，但是如果不用longlong来避免溢出的话，处理起来的细节真滴折磨。</p><p>细节：（下面默认$MIN=-2^{31}，MAX=2^{31}-1$）</p><ol><li>当a=MIN,b=-1时，会发生溢出，需要特判。</li><li>由于代码中不能出现除号，所以二分时<code>mid=left+()(right-left)&gt;&gt;1)</code></li><li>二分时要在mid==MAX时break，以避免left=MAX+1会溢出</li><li>快速乘法中，当ret加上n的贡献前，需要先判断是否满足ret+n&gt;=a,否则即return,同样可以防止溢出</li><li>在最后一轮循环前的每次循环中，要保证倍增的b倍增后不会大于a，以防止溢出，至于最后一次循环可直接不自增</li></ol><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">long</span> <span class="token expression"><span class="token keyword">long</span> ll</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MIN</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token comment">//你敢信我写个max还得这么写</span></span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span>divisor<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> _dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> _divisor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dividend<span class="token operator">=</span>_dividend<span class="token punctuation">;</span>divisor<span class="token operator">=</span>_divisor<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dividend<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//被除数等于0，直接返回0</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dividend<span class="token operator">==</span>MIN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//防止溢出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>divisor<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> MIN<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>divisor<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> MAX<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor<span class="token operator">==</span>MIN<span class="token punctuation">)</span><span class="token keyword">return</span> dividend<span class="token operator">==</span>MIN<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//顺便防一下这个</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token punctuation">(</span>dividend<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>divisor<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>divisor<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>dividend<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//设个标志位判断最后结果是否为负数</span>        dividend<span class="token operator">=</span><span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span><span class="token punctuation">,</span>divisor<span class="token operator">=</span><span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//都映射到负数域上</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">&amp;&amp;</span>dividend<span class="token operator">></span>divisor<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//如果被除数的绝对值小于除数的则直接返回0</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>dividend<span class="token operator">==</span>MIN<span class="token operator">?</span>MAX<span class="token operator">:</span><span class="token operator">-</span>dividend<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span>mid<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span>MAX<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//防溢出</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flag<span class="token operator">?</span>ans<span class="token operator">:</span><span class="token operator">-</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>divisor<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">&lt;</span>dividend<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防溢出</span>                ret<span class="token operator">+=</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>dividend<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//防溢出</span>                n<span class="token operator">+=</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            x<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">>=</span>dividend<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面这段代码是我在大佬的题解中模仿三叶姐的java题解改了改的c++版本，只能说三叶姐yyds。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//由于操作数都是负数，因此自倍增过程中，如果操作数小于 INT_MIN 的一半（-1073741824），则代表发生溢出。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> MIN <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">,</span> MAX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> LIMIT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1073741824</span><span class="token punctuation">;</span> <span class="token comment">// MIN 的一半</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> MIN <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> MAX<span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> a <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> b<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> LIMIT <span class="token operator">&amp;&amp;</span> d <span class="token operator">>=</span> LIMIT <span class="token operator">&amp;&amp;</span> c <span class="token operator">>=</span> a <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                c <span class="token operator">+=</span> c<span class="token punctuation">;</span> d <span class="token operator">+=</span> d<span class="token punctuation">;</span><span class="token comment">//c不断倍增，d相当于商的倍增</span>            <span class="token punctuation">&#125;</span>            a <span class="token operator">-=</span> c<span class="token punctuation">;</span>            ans <span class="token operator">+=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> ans <span class="token operator">:</span> <span class="token operator">-</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go开发基础（二）</title>
      <link href="/2021/10/08/go3/"/>
      <url>/2021/10/08/go3/</url>
      
        <content type="html"><![CDATA[<h1 id="go开发基础2-—-go的基础语法（2）"><a href="#go开发基础2-—-go的基础语法（2）" class="headerlink" title="go开发基础2 — go的基础语法（2）"></a>go开发基础2 — go的基础语法（2）</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h3><p>由于UTF-8对占用字节长度的不定性，Go 中的字符串里面的字符也可能根据需要占用 1 至 4 个字节。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a<span class="token operator">:=</span> <span class="token string">`This is a raw string \n`</span><span class="token comment">//``表示原样输出字符串，不对\进行转义</span><span class="token keyword">var</span> b <span class="token builtin">string</span><span class="token operator">=</span><span class="token string">"abc"</span>c<span class="token operator">:=</span>a<span class="token operator">+</span>b<span class="token comment">//+拼接</span><span class="token comment">//下面是strings包的常用操作</span><span class="token keyword">import</span> <span class="token string">"strings"</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token comment">//判断字符串 s 是否以 prefix 开头</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>suffix <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token builtin">bool</span><span class="token comment">//判断字符串 s 是否以 suffix 结尾</span>strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> substr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token comment">//判断字符串 s 是否包含 substr</span>strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">//Index 返回字符串 str 在字符串 s 中的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str</span>strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">//最后出现的索引</span>strings<span class="token punctuation">.</span><span class="token function">IndexRune</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> r <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">//如果需要查询非 ASCII 编码的字符在父字符串中的位置，建议使用该函数来对字符进行定位</span>strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">//将str中前n个old子串变成new,如果n=-1，则将全部old转为new</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">//用于计算字符串 str 在字符串 s 中出现的非重叠次数,注意是非重叠，即ggg中的gg用这个函数算是返回1</span>strings<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">//返回count个s,比如（a,3）返回aaa</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">// 将字符串中的 Unicode 字符全部转换为相应的小写字符</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">//将字符串中的 Unicode 字符全部转换为相应的大写字符</span>strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> cut <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//将s开头结尾的cut剪掉，如果只想减去空格，则用TrimSpace,如果只想开头，则用TrimLeft,结尾则TrimRight</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//以sep作为分隔字符串分隔s,如果拿空格作分隔符，用strings.Fields即可，都是返回一个slice</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>sl <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token comment">//以sep作为分隔符连接s1中元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串与类型转换"><a href="#字符串与类型转换" class="headerlink" title="字符串与类型转换"></a>字符串与类型转换</h3><p>字符串与其它类型的转换,通过<strong>strconv</strong>包实现的。</p><p>针对从数字类型转换到字符串，Go 提供了以下函数：</p><ul><li><p><code>strconv.Itoa(i int) string</code> 返回数字 i 所表示的字符串类型的十进制数。</p></li><li><p><code>strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string</code> 将 64 位浮点型的数字转换为字符串，其中 <code>fmt</code> 表示格式（其值可以是 <code>&#39;b&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;f&#39;</code> 或 <code>&#39;g&#39;</code>），<code>prec</code> 表示精度，<code>bitSize</code> 则使用 32 表示 float32，用 64 表示 float64。</p></li></ul><p>而任何类型 <strong>T</strong> 转换为字符串总是成功的。</p><p>针对从字符串类型转换为数字类型，Go 提供了以下函数：</p><ul><li><code>strconv.Atoi(s string) (i int, err error)</code> 将字符串转换为 int 型。</li><li><code>strconv.ParseFloat(s string, bitSize int) (f float64, err error)</code> 将字符串转换为 float64 型。</li></ul><h3 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">s<span class="token operator">:=</span><span class="token string">"123"</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>ch<span class="token operator">:=</span><span class="token keyword">range</span> s<span class="token punctuation">&#123;</span>    xxx<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h2><h3 id="数组的声明与初始化"><a href="#数组的声明与初始化" class="headerlink" title="数组的声明与初始化"></a>数组的声明与初始化</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//类似C的数组，大小在定义后不能更改</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//数组声明</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">3.0</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">&#125;</span><span class="token comment">//定义</span>a<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token comment">//短定义</span>b<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token comment">//...表示根据元素个数分配大小</span>c<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token comment">//[0,0,0,0,100]这个意思是100的index为4，其他默认为0</span>d<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token comment">// [1 0 0 0 1 0 0 0 0 1]</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    USD Currency <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 美元</span>    EUR                 <span class="token comment">// 欧元</span>    GBP                 <span class="token comment">// 英镑</span>    RMB                 <span class="token comment">// 人民币</span><span class="token punctuation">)</span>symbol <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>USD<span class="token punctuation">:</span> <span class="token string">"$"</span><span class="token punctuation">,</span> EUR<span class="token punctuation">:</span> <span class="token string">"€"</span><span class="token punctuation">,</span> GBP<span class="token punctuation">:</span> <span class="token string">"￡"</span><span class="token punctuation">,</span> RMB<span class="token punctuation">:</span> <span class="token string">"￥"</span><span class="token punctuation">&#125;</span><span class="token comment">//索引：初始值</span>flag <span class="token operator">:=</span> b<span class="token operator">==</span>c<span class="token comment">//如果一个数组的元素类型是可以相互比较的，那么数组类型也是可以相互比较的,当两个数组的所有元素都是相等的时候数组才是相等的。</span><span class="token keyword">var</span> graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//多维数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组实际上属于一种容器，为值类型（不像 C/C++ 中是指向首元素的指针）</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">//此时arr1的类型为*[5]int，即数组指针</span><span class="token keyword">var</span> arr2 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>arr2<span class="token operator">=</span><span class="token operator">*</span>arr1<span class="token comment">//相当于作了拷贝</span>arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span><span class="token comment">//此时不会改变arr1的值，即arr1:&amp;[0 0 0 0 0],arr2:[0 0 0 100 0]</span><span class="token comment">//当然可以像c++一样按引用传递，到函数再提</span><span class="token comment">//也可以按数组指针传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">a<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token comment">//类C遍历，使用len(a)直接获取数组长度（c++表示羡慕</span>xxx<span class="token punctuation">&#125;</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>num<span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token punctuation">&#123;</span><span class="token comment">//通过range来遍历，如果index用不上可用_来替代</span>    xxx<span class="token punctuation">&#125;</span><span class="token comment">//在该循环中num只是其中元素的拷贝，改变num并不会改变原数组中元素的值</span><span class="token keyword">for</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> screen <span class="token punctuation">&#123;</span><span class="token comment">//多维数组或切片的遍历</span><span class="token keyword">for</span> column <span class="token operator">:=</span> <span class="token keyword">range</span> screen<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>screen<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片的创建"><a href="#切片的创建" class="headerlink" title="切片的创建"></a>切片的创建</h3><p>切片（slice）是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个<strong>引用类型</strong>（因此更类似于 C/C++ 中的数组类型，或者 Python 中的 list 类型）。</p><p>切片的长度可以在运行时修改，最小为 0 最大为相关数组的长度：切片是一个 <strong>长度可变的数组</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//不需要声明容量，一个切片在未初始化之前默认为 nil，长度为 0。</span>arr1<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>a<span class="token operator">=</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">//赋值，经典左闭右开，a=[1,2]</span>b<span class="token operator">:=</span>arr1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">//b=[1,2]，短定义</span><span class="token comment">//此时a,b两个切片共享这块数组，也就是其任意的修改都会影响数组</span>a<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//切片扩容，但不可以超出数组原长度</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token comment">//类似数组方式初始化，创建了一个长度为 5 的数组并且创建了一个相关切片</span><span class="token comment">//切片在内存中的组织方式实际上是一个有 3 个域的结构体：指向相关数组的指针，切片长度以及切片容量。</span>n1<span class="token operator">=</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//切片长度</span>n2<span class="token operator">=</span><span class="token function">cap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//切片容量，一般对于一个数组的相关切片，cap(a)等于数组长度，则必有len(a)小于等于cap(a)</span>c<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//当相关数组还没有定义时，我们可以使用 make() 函数来创建一个切片 同时创建好相关数组,len=50,cap=100,cap可省略</span>d<span class="token operator">:=</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token comment">//与上面等价</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>b <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>c <span class="token operator">:=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">//对切片进行切片的修改一样会影响原数组</span><span class="token comment">//切片的遍历与数组相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>new（T）</strong> 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：这种方法 返回一个指向类型为 T，值为 0 的地址的指针，它适用于值类型如数组和结构体；它相当于 &amp;T{}。其获取的是存储指定变量内存地址的一个变量，对于变量内部结构并不会执行相应的初始化操作</p><p>make（T） <strong>返回一个类型为 T 的初始值</strong>，它只适用于3种内建的引用类型：切片、map 和 channel。三者在内存中存在多个组成部分， 需要对内存组成部分初始化后才能使用，而make就是对三者进行<strong>初始化</strong>的一种操作方式</p><h3 id="数组与切片函数传参"><a href="#数组与切片函数传参" class="headerlink" title="数组与切片函数传参"></a>数组与切片函数传参</h3><p>把一个大数组传递给函数会消耗很多内存。有两种方法可以避免这种现象：</p><ul><li>传递数组的指针</li><li>使用数组的切片（常用）</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token comment">//用切片作为传参通用性更高，因为长度不定，而且内存消耗更小</span>s <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片的复制与追加"><a href="#切片的复制与追加" class="headerlink" title="切片的复制与追加"></a>切片的复制与追加</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">slFrom <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>slTo <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>n <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>slTo<span class="token punctuation">,</span> slFrom<span class="token punctuation">)</span><span class="token comment">//copy函数返回所复制切片的个数，n=3</span>s1<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>s2<span class="token operator">:=</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>s2<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//此时append相当于改变了原数组，即s1:[1,2,1]</span>s2<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//如果 s 的容量不足以存储新增元素，append 会分配新的切片来保证已有切片元素和新增元素的存储。因此，返回的切片可能已经指向一个不同的相关数组了。s2此时就是这样</span>s2<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//也可以添加多个元素</span>s3<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>s3<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span>s2<span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//...相当于把切片切开添加进s3中</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//切除a从i到j-1范围的元素</span>a<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//在索引为i处插入元素</span>a<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//在索引为i处插入长度为j的切片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串与切片"><a href="#字符串与切片" class="headerlink" title="字符串与切片"></a>字符串与切片</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">s<span class="token operator">:=</span><span class="token string">"string"</span>c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">//字符串切片</span>c<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>s<span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//类比数组</span>substr<span class="token operator">:=</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//类比切片</span><span class="token comment">//string为不可变类型，即不可修改单一的值，s[1]='D'是不合法的，所以要转成byte数组来改变值，再string转回来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go开发基础（零）</title>
      <link href="/2021/10/07/go1/"/>
      <url>/2021/10/07/go1/</url>
      
        <content type="html"><![CDATA[<h1 id="go开发基础0-—-搭建go开发环境及常用命令"><a href="#go开发基础0-—-搭建go开发环境及常用命令" class="headerlink" title="go开发基础0 — 搭建go开发环境及常用命令"></a>go开发基础0 — 搭建go开发环境及常用命令</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>此处将介绍vscode搭建go环境的过程</p><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><h4 id="go"><a href="#go" class="headerlink" title="go"></a>go</h4><p>由于官网需要调查兵团，所以go的下载推荐到<a href="https://studygolang.com/dl">go中文网</a>去下载，我这边以windows版本进行讲解。</p><p>在下载好对应版本的msi文件后，直接一路点下去即可，如果想将go安装路径放到其他的话也可自行选择，注意的是，这里选择的安装路径即是<strong>goroot</strong>的路径。</p><h4 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h4><p>这个直接下就完事了，然后 在插件商店中下载go插件（<del>找最多人下的准没错</del>）。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>右键此电脑-&gt;点击属性-&gt;点击高级系统设置-&gt;点击环境变量-&gt;修改用户变量如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wdstql/blog_image/20211005094112.png"></p><p>GOPATH是你一般写go程序的地方，GO111MODULE是要开启go mod，GOPROXY调了再说。</p><p>然后win+R键入cmd打开命令行，键入<code>go version</code>查看go版本，输入<code>go env</code>查看配置好的环境变量</p><h3 id="写个helloworld"><a href="#写个helloworld" class="headerlink" title="写个helloworld"></a>写个helloworld</h3><p>在gopath目录下新建src目录，再在src下新建一个helloworld目录，再在helloworld中新建main.go键入以下代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">//程序入口处</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//输入输出常用的包</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在terminal中切换到当前目录，并键入<code>go mod init helloworld</code>，此时你会发现目录中多了个go mod文件，这个是用来管理你项目所用到的包的，暂时不用管。</p><p>然后键入<code>go run main.go</code>即可将你的helloworld跑起来啦。</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>按F5选择go，然后在生成的.vscode目录下的<strong>launch.json</strong>文件中输入以下代码。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>          <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span>                  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaunchGo"</span><span class="token punctuation">,</span>                  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"go"</span><span class="token punctuation">,</span>                  <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>                  <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>                  <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span><span class="token punctuation">,</span>                  <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>                  <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token property">"GOPATH"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment">//这两项请自行查看</span>                      <span class="token property">"GOROOT"</span><span class="token operator">:</span> <span class="token string">""</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token comment">//"showLog": true</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于包和目录结构"><a href="#关于包和目录结构" class="headerlink" title="关于包和目录结构"></a>关于包和目录结构</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>go采用<code>import</code>来调用包，代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//要加双引号</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/wdstql"</span><span class="token comment">//绝对路径找包，以src作为起始目录</span>    m <span class="token string">"github.com/aaa"</span><span class="token comment">//m作为别名</span>    <span class="token boolean">_</span> <span class="token string">"github.com/bbb"</span><span class="token comment">//_表示只是调用了这个包的init函数，并不直接使用这个包里的函数</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同一个文件夹下属于同一个包，可以互相调用函数</p><p>go中根据首字母的大小写来确定可以访问的权限。无论是方法名、常量、变量名还是结构体的名称，如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用。</p><p><strong>类属性如果是小写开头，则其序列化会丢失属性对应的值，同时也无法进行Json解析</strong>。（暂时没看懂）</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>gopath目录就是我们存储我们所编写源代码的目录。该目录下往往要有3个子目录：src，bin，pkg。</p><p>src —- 里面每一个子目录，就是一个包。包内是Go的源码文件</p><p>pkg —- 编译后生成的，包的目标文件</p><p>bin —- 生成的可执行文件。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>go中的文件类型分为三种：</p><ol><li><p><strong>命令源码文件</strong>：声明自己属于main代码包，源码文件是 Go 程序的入口。</p><p>同一个代码包中最好也不要放多个命令源码文件。多个命令源码文件虽然可以分开单独 go run 运行起来，但是无法通过 go build 和 go install。</p></li><li><p><strong>库源码文件</strong>：库源码文件就是不具备命令源码文件上述两个特征的源码文件。存在于某个代码包中的普通的源码文件。</p><p>库源码文件被安装后，相应的归档文件（.a 文件）会被存放到当前工作区的 pkg 的平台相关目录下。</p></li><li><p><strong>测试源码文件</strong>：名称以 _test.go 为后缀的代码文件，并且必须包含 Test 或者 Benchmark 名称前缀的函数：名称以 Test 为名称前缀的函数，只能接受 *testing.T 的参数，这种测试函数是功能测试函数，如<code>func Test(t *testing.T )&#123;&#125;</code>。名称以 Benchmark 为名称前缀的函数，只能接受 *testing.B 的参数，这种测试函数是性能测试函数，如<code>func Benchmarkxxx(b *testing.B)&#123;&#125;</code></p></li></ol><h2 id="go常用命令"><a href="#go常用命令" class="headerlink" title="go常用命令"></a>go常用命令</h2><p>在详细分析这4个命令之前，先罗列一下通用的命令标记，以下这些命令都可适用的：</p><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">用于强制重新编译所有涉及的 Go 语言代码包（包括 Go 语言标准库中的代码包），即使它们已经是最新的了。该标记可以让我们有机会通过改动底层的代码包做一些实验。</td></tr><tr><td align="left">-n</td><td align="left">使命令仅打印其执行过程中用到的所有命令，而不去真正执行它们。如果不只想查看或者验证命令的执行过程，而不想改变任何东西，使用它正好合适。</td></tr><tr><td align="left">-race</td><td align="left">用于检测并报告指定 Go 语言程序中存在的数据竞争问题。当用 Go 语言编写并发程序的时候，这是很重要的检测手段之一。</td></tr><tr><td align="left">-v</td><td align="left">用于打印命令执行过程中涉及的代码包。这一定包括我们指定的目标代码包，并且有时还会包括该代码包直接或间接依赖的那些代码包。这会让你知道哪些代码包被执行过了。</td></tr><tr><td align="left">-work</td><td align="left">用于打印命令执行时生成和使用的临时工作目录的名字，且命令执行完成后不删除它。这个目录下的文件可能会对你有用，也可以从侧面了解命令的执行过程。如果不添加此标记，那么临时工作目录会在命令执行完毕前删除。</td></tr><tr><td align="left">-x</td><td align="left">使命令打印其执行过程中用到的所有命令，并同时执行它们。</td></tr></tbody></table><h3 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h3><p>专门运行命令源码文件，接受命令源码文件和多个库源码文件作为参数，不接受测试源码文件，格式为<code>go run xxx.go</code>，其编译文件并生成对应的归档文件和可执行文件并最终运行。</p><p>go run 命令在第二次执行的时候，如果发现导入的代码包没有发生变化，那么 go run 不会再次编译这个导入的代码包。直接静态链接进来。</p><h3 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h3><p>go build 用于编译我们指定的源码文件或代码包以及它们的依赖包。但是<strong>注意如果用来编译非命令源码文件，即库源码文件，go build 执行完是不会产生任何结果的。这种情况下，go build 命令只是检查库源码文件的有效性，只会做检查性的编译，而不会输出任何结果文件。</strong></p><p>go build 编译命令源码文件，则会在该命令的执行目录中生成一个可执行文件，但不会执行这个可执行文件。</p><h3 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h3><p>go install 用于编译并安装指定的代码包及它们的依赖包。当指定的代码包的依赖包还没有被编译和安装时，该命令会先去处理依赖包。</p><p>go install 命令只比 go build 命令多做了一件事，即：把编译好的结果移到<code>$GOPATH/pkg</code>或者<code>$GOPATH/bin</code>。</p><h3 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h3><p>go get 命令用于从远程代码仓库（比如 Github ）上下载并安装代码包。<strong>注意，go get 命令会把当前的代码包下载到 $GOPATH 中的第一个工作区的 src 目录中，并安装。</strong></p><p>由于go mod的存在，go get的使用变得少了，不再赘述，可自行查看</p><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><ul><li><a href="https://blog.csdn.net/qq_45914985/article/details/109555913">vscode配置go环境</a></li><li><a href="https://www.golangroadmap.com/class/goinitial/1-10.html#%E4%BA%8C%E3%80%81go%E7%9A%84%E5%91%BD%E4%BB%A4">Go的执行原理以及Go的命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go开发基础（一）</title>
      <link href="/2021/10/07/go2/"/>
      <url>/2021/10/07/go2/</url>
      
        <content type="html"><![CDATA[<h1 id="go开发基础1-—-go的基础语法（1）"><a href="#go开发基础1-—-go的基础语法（1）" class="headerlink" title="go开发基础1 — go的基础语法（1）"></a>go开发基础1 — go的基础语法（1）</h1><p>本文将会在多处将go的语法与c/c++的作对比，以便于熟悉。</p><p>先讲一点，go中的代码末尾都不用<strong>加分号</strong></p><h2 id="变量、常量与数据类型"><a href="#变量、常量与数据类型" class="headerlink" title="变量、常量与数据类型"></a>变量、常量与数据类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//1</span><span class="token keyword">var</span> a <span class="token builtin">int</span><span class="token comment">//声明</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//定义</span><span class="token comment">//2</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//3</span>a<span class="token operator">:=</span><span class="token number">1</span><span class="token comment">//短定义，仅能在函数内使用，无法作为全局变量</span><span class="token comment">//4</span><span class="token keyword">var</span> a <span class="token builtin">int</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">//多此一举了属于是</span><span class="token comment">//多变量</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token comment">//显然可以是不同类型</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token builtin">int</span><span class="token comment">//先声明</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">//由于声明了则必为同一类型</span><span class="token keyword">var</span> <span class="token punctuation">(</span>a <span class="token builtin">int</span>    b <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//集合类型</span><span class="token comment">//另外在go中变量单单被定义是不行的，必须被使用，否则无法通过编译</span><span class="token comment">//各种数据类型的变量在未赋值前都会自动赋予初始值，如int为0，string为“”，bool为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//说简单点就是用const来替代var，表示该变量在程序运行过程中不会被修改</span><span class="token comment">//常量自然无短定义</span><span class="token keyword">const</span> LENGTH <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">const</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"str"</span> <span class="token comment">//多重赋值</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token comment">//集合类型，枚举常量</span>    Unknown <span class="token operator">=</span> <span class="token number">0</span>    Female <span class="token operator">=</span> <span class="token number">1</span>    Male <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型</span><span class="token comment">//不曾使用的常量，在编译的时候，是不会报错的</span><span class="token comment">//下面是关于iota，即一个可以被编译器修改的常量</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    a <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">//0</span>    b          <span class="token comment">//1</span>    c          <span class="token comment">//2</span>    d <span class="token operator">=</span> <span class="token string">"ha"</span>   <span class="token comment">//独立值，iota += 1</span>    e          <span class="token comment">//"ha"   iota += 1</span>    f <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment">//iota +=1</span>    g          <span class="token comment">//100  iota +=1</span>    h <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">//7,恢复计数</span>    i          <span class="token comment">//8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="https://cdn.jsdelivr.net/gh/wdstql/blog_image/002shujuleixng.jpg"></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Unicode 包中内置了一些用于测试字符的函数，这些函数的返回值都是一个布尔值，如下所示（其中 ch 代表字符）：</span><span class="token comment">//byte表示字符，以uint8表示，rune表示unicode字符，以int表示</span><span class="token keyword">import</span> <span class="token string">"unicode"</span>unicode<span class="token punctuation">.</span><span class="token function">IsLetter</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>unicode<span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>unicode<span class="token punctuation">.</span><span class="token function">IsSpace</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型转换可看<a href="https://www.cnblogs.com/oceanran/p/12160178.html">这篇</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//输入</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token comment">//类C</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token comment">//scanln函数会识别空格左右的内容，但是一旦遇到换行符就会立即结束，不论后续还是否存在需要带输入的内容。</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token comment">//scan函数会识别空格左右的内容，哪怕换行符号存在也不会影响scan对内容的获取。</span><span class="token comment">//输出</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">//输出的内容会用空格分隔</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token comment">//类C</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//bufio包读取</span><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"os"</span>    <span class="token string">"bufio"</span><span class="token punctuation">)</span>reader<span class="token operator">:=</span>bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span>s1<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">//以换行符为结尾，_表示读取到这个数据不需要，此时输入的字符串保存在s1中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>printf占位符请看<a href="https://www.jianshu.com/p/66aaf908045e">此处</a></p><h2 id="分支与循环结构"><a href="#分支与循环结构" class="headerlink" title="分支与循环结构"></a>分支与循环结构</h2><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//要注意的是格式</span><span class="token keyword">if</span> a<span class="token operator">></span>b<span class="token punctuation">&#123;</span><span class="token comment">//类C</span>    xxx<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">&#123;</span><span class="token comment">//else一定要写在这里</span>xxx<span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//大括号不能省</span>xxx<span class="token punctuation">&#125;</span><span class="token keyword">if</span> n<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#123;</span><span class="token comment">//可以先加个语句，在评估条件之前执行</span>    xxx<span class="token punctuation">&#125;</span><span class="token comment">//要注意的是n的作用域仅在该if中</span><span class="token keyword">switch</span> a<span class="token punctuation">&#123;</span><span class="token comment">//类C</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    xxx    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    xxx    <span class="token keyword">default</span><span class="token punctuation">:</span>    xxx<span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">"A"</span> <span class="token punctuation">:</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"优秀!\n"</span> <span class="token punctuation">)</span>         <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">,</span> grade <span class="token operator">==</span> <span class="token string">"C"</span> <span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>逗号表示或     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"良好\n"</span> <span class="token punctuation">)</span>          <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">"D"</span> <span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>注意无大括号，靠缩进来辨别     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"及格\n"</span> <span class="token punctuation">)</span>     <span class="token keyword">fallthrough</span><span class="token comment">//执行下面的子句，fallthrough应该是某个case的最后一行。如果它出现在中间的某个地方，编译器就会抛出错误。</span>    <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">"F"</span><span class="token punctuation">:</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"不及格\n"</span> <span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"差\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token comment">//类C</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//类C</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">&#123;</span><span class="token comment">//只有跳出条件也可以，类while</span>    xxx<span class="token punctuation">&#125;</span>LOOP<span class="token punctuation">:</span> <span class="token keyword">for</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">15</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/* 跳过迭代 */</span>     a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>     <span class="token keyword">goto</span> LOOP    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a的值为 : %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    a<span class="token operator">++</span>     <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战ccf</title>
      <link href="/2021/09/17/duxie/"/>
      <url>/2021/09/17/duxie/</url>
      
        <content type="html"><![CDATA[<h1 id="备战ccf之文本处理"><a href="#备战ccf之文本处理" class="headerlink" title="备战ccf之文本处理"></a>备战ccf之文本处理</h1><p>说是备战ccf，其实就是我想总结一下用到的文件输入输出和文件读写，以及关于一些文本处理的东西而已</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %c %s %f %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//效率高，在较大数据输入的题中用于优化输入速度，但一般不如cin写起来爽</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d%%%4.2f"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result:  123%3.14</span><span class="token comment">//输出效率高，不过其实一般不用输出这么多东西，但有时候比cout方便些，因为好格式化输出</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">3.1415</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//result:  3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来重点讲讲getline:</p><p>先讲下应用场景：当 cin 读取数据时，它会传递并忽略任何前导白色空格字符（空格、制表符或换行符）。一旦它接触到第一个非空格字符即开始阅读，当它读取到下一个空白字符时，它将停止读取,而getline则是读到换行符才会停止读取</p><p>下面是它的函数原型和日常使用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">istream<span class="token operator">&amp;</span><span class="token function">getline</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span>is<span class="token punctuation">,</span>string a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//is为输入流，而a是将输入流的内容保存到的地方,b为读取终止符，默认为'\n'</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//常用写法，将遇到换行前的内容保存到str中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意点：</p><ol><li>如果将cin和getline混用时,在getline前使用的cin需要先清理cin中的缓存再使用，简单点就是可以用个<code>getcahar()</code>来把回车读了。</li><li>以下代码会陷入死循环</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//这样只有当你到达EOF才能终止循环，但是如果把cin换为文件输入流，这又行了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>接下来讲讲文件读写，这玩意我是写一次程序百度一次，因为不怎么用，都是直接用给的样例（逃<br>但在开发十分重要，你说你读个文件都不会，还敲个屁代码（我骂我自己了属于是）<br>哦这个ccf应该用不到</p><pre><code>本文只写一些我自己常用的操作，并不会特别系统的记录读写的所有操作</code></pre><p>此处略过c的读写操作<br>c++基本都是使用fstream之类的流来进行操作<br>ifstream为文件读入流，ofstream为文件写入流，还要认识以下&lt;&lt;和&gt;&gt;这两个运算符，其中插入器（&lt;&lt;）向流输出数据，如向默认输出流cout也就是显示器输出，而析取器（&gt;&gt;）为从流输出数据，如默认输入流cin即是键盘。<br>下面给出示例代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ifstream <span class="token function">infile</span><span class="token punctuation">(</span><span class="token string">"123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从123.txt中拿数据</span>string str<span class="token punctuation">;</span>infile<span class="token operator">>></span>str<span class="token punctuation">;</span><span class="token comment">//将123.txt的内容以string类型存在str中,遇到空格停</span><span class="token keyword">if</span><span class="token punctuation">(</span>infile<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">ShowMessage</span><span class="token punctuation">(</span><span class="token string">"已经到达文件尾!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成员函数eof()用来检测是否到达文件尾，如果到达文件尾返回非0值，否则返回0。</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span>string text<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>infile<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>text<span class="token operator">+=</span>ch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一个一个字符的读，并加入到text中，此代码代表将123.txt中所有数据读到text中</span>ofstream offile<span class="token punctuation">;</span>offile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"234.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向234.txt中写入数据</span>offile<span class="token operator">&lt;&lt;</span><span class="token string">"456"</span><span class="token punctuation">;</span><span class="token comment">//写入456</span>offile<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向流写一个字符'c'</span><span class="token comment">//读写二进制数据文件</span><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>infile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从123.txt读5个数到n中，注意类型转换</span>offile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乱写的</span>infile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记得关哦</span>offile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><p>这里主要涉及到对一堆字符串的处理，该部分包括stringstream的使用，字符串一堆函数的奇妙融合，正则表达式的使用</p><h3 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h3><p>先讲讲sscanf和sprintf,看这篇文章吧，<a href="https://www.cnblogs.com/hujunzheng/p/5042068.html">sscanf/sprintd</a></p><p>stringstream主要的应用是将字符串转换相应的格式化数，还有按空格自动帮你分开字符串。</p><p>无内鬼，来点代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stringstream ss<span class="token punctuation">;</span>string s<span class="token operator">=</span><span class="token string">"123 456.12"</span><span class="token punctuation">;</span>ss<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">double</span> b<span class="token punctuation">;</span>ss<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span><span class="token comment">//a=123,b=456.12</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>string <span class="token function">myto_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token comment">//将T转成string</span><span class="token punctuation">&#123;</span>        ostringstream oss<span class="token punctuation">;</span><span class="token comment">//创建一个流</span>        oss<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">;</span><span class="token comment">//把值传递如流中</span>        <span class="token keyword">return</span> oss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取转换后的字符转并将其写入result</span><span class="token punctuation">&#125;</span>string <span class="token function">str1</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>ss<span class="token punctuation">.</span><span class="token function">seekp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ios<span class="token double-colon punctuation">::</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//流指针的移动</span>ss<span class="token operator">&lt;&lt;</span><span class="token string">"hello"</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//123456hello</span>ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span>ss<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setfill</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//输出007</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：<a href="https://blog.csdn.net/u011028345/article/details/75449169">C++：string和stringstream用法总结</a></p><h3 id="这里我将给出ccf一些文本处理的题"><a href="#这里我将给出ccf一些文本处理的题" class="headerlink" title="这里我将给出ccf一些文本处理的题"></a>这里我将给出ccf一些文本处理的题</h3><p>一、<a href="https://blog.csdn.net/tigerisland45/article/details/54980592">模板生成系统</a></p><p>附上我的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span>text<span class="token punctuation">;</span>    string line<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> um<span class="token punctuation">;</span>    string key<span class="token punctuation">,</span> value<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> pos <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>pos<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        um<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>e<span class="token operator">:</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> pos1 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"&#123;&#123; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> pos2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">" &#125;&#125;"</span><span class="token punctuation">,</span>pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pos1 <span class="token operator">!=</span>string<span class="token double-colon punctuation">::</span>npos<span class="token operator">&amp;&amp;</span>pos2<span class="token operator">!=</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string str1<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos1<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span> pos2<span class="token operator">-</span>pos1<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos1<span class="token punctuation">,</span> pos2 <span class="token operator">-</span> pos1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>um<span class="token punctuation">[</span>str1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pos2 <span class="token operator">=</span> um<span class="token punctuation">[</span>str1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pos1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos1<span class="token punctuation">,</span> pos2 <span class="token operator">-</span> pos1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pos2 <span class="token operator">=</span> pos1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pos1 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"&#123;&#123; "</span><span class="token punctuation">,</span>pos2<span class="token punctuation">)</span><span class="token punctuation">;</span>            pos2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">" &#125;&#125;"</span><span class="token punctuation">,</span>pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、<a href="https://blog.csdn.net/tigerisland45/article/details/54966865">路径解析</a></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>这东西常用于模糊搜索，例如在一段字符串寻找逗号或者句号。我这里只涉及c++regex库的常用操作</p><p>首先，关于正则表达式的写法，<a href="https://www.runoob.com/regexp/regexp-tutorial.html">请看这里</a></p><p>先给出正则表达式初始化，<code>regex pattern1(&quot;(.*?)[,.]&quot;);//非贪婪匹配逗号或句号前任意字符串</code></p><p>然后讲讲匹配结果<code>match_results</code>这一模板类，其根据匹配到的结果的实例化类型包括下面这些：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> match_results<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> cmatch<span class="token punctuation">;</span><span class="token keyword">typedef</span> match_results<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">wchar_t</span><span class="token operator">*</span><span class="token operator">></span> wcmatch<span class="token punctuation">;</span><span class="token keyword">typedef</span> match_results<span class="token operator">&lt;</span>string<span class="token double-colon punctuation">::</span>const_iterator<span class="token operator">></span> smatch<span class="token punctuation">;</span><span class="token keyword">typedef</span> match_results<span class="token operator">&lt;</span>wstring<span class="token double-colon punctuation">::</span>const_iterator<span class="token operator">></span> wsmatch<span class="token punctuation">;</span><span class="token comment">//宽字符串迭代器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用正则操作:</p><ol><li><p><code>regex_match</code> :用于将目标串和正则表达式匹配，返回一个 bool 值，true 为匹配，false 为不匹配。整个字符串必须完全和正则表达式相匹配，不能有多余的字符，如果需要部分匹配则应使用 <code>regex_search</code> 。</p></li><li><p><code>regex_search</code> :只需要有个子串匹配即返回true</p></li><li><p><code>regex_replace</code> : 替换</p></li></ol><p>样例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">regex <span class="token function">pattern1</span><span class="token punctuation">(</span><span class="token string">"(.*?)[,.]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非贪婪匹配逗号或句号前任意字符串</span>string<span class="token double-colon punctuation">::</span>const_iterator iterStart <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//迭代器声明</span>string<span class="token double-colon punctuation">::</span>const_iterator iterEnd <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string temp<span class="token punctuation">;</span>smatch results<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">regex_search</span><span class="token punctuation">(</span>iterStart<span class="token punctuation">,</span>iterEnd<span class="token punctuation">,</span>results<span class="token punctuation">,</span>pattern1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    temp <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    sentences_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    iterStart <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">//更新搜索起始位置，搜索剩下的字符串</span><span class="token punctuation">&#125;</span>regex <span class="token function">pattern2</span><span class="token punctuation">(</span><span class="token string">"[,.]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配逗号或句号</span><span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">regex_replace</span><span class="token punctuation">(</span>sentences_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pattern2<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//剔除逗号和句号,返回替换后的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>就写到这吧，累了。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 基础编程知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> 文本处理 </tag>
            
            <tag> 文件读写 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战校赛（5）</title>
      <link href="/2021/09/10/ac-auto/"/>
      <url>/2021/09/10/ac-auto/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点整理（5）trie-kmp-ac自动机"><a href="#知识点整理（5）trie-kmp-ac自动机" class="headerlink" title="知识点整理（5）trie/kmp/ac自动机"></a>知识点整理（5）trie/kmp/ac自动机</h1><p>本篇主要讲一些对字符串处理的好东西</p><h2 id="Trie（前缀树-字典树）"><a href="#Trie（前缀树-字典树）" class="headerlink" title="Trie（前缀树/字典树）"></a>Trie（前缀树/字典树）</h2><ul><li>每个结点包含一个字符（对于字符串问题来说）</li><li><strong>一个结点所对应的字符串</strong>:从根到该节点的路径上所有字母依次连起来所组成的字符串。</li><li>根节点对应空字符串。</li><li>一个节点v的所有子孙有相同的前缀，即v对应的字符串。</li><li>是一个十分典型的以空间换时间的算法</li><li>典型应用是用于<strong>统计和排序大量的字符串</strong>（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高</li><li>插入查找的复杂度为$O(n)$，n为字符串长度。</li></ul><h3 id="基本思想（以字母树为例）"><a href="#基本思想（以字母树为例）" class="headerlink" title="基本思想（以字母树为例）"></a>基本思想（以字母树为例）</h3><ol><li><strong>Insert（string key, int value）</strong><br>对于一个单词，从根开始，沿着单词的各个字母所对应的树中的节点分支向下走，直到单词遍历完，将最后的节点标记为红色，表示该单词已插入Trie树。</li><li><strong>Find（string key）</strong><br>同样的，从根开始按照单词的字母顺序向下遍历trie树，一旦发现某个节点标记不存在或者单词遍历完成而最后的节点未标记为红色，则表示该单词不存在，若最后的节点标记为红色，表示该单词存在。</li><li><strong>Delete（string key）</strong><br>从trie中删除一个字符串key以及它的键值，只需将标志置为未标记即可，但同时要将所有以该字符串为公共前缀的字符串注销（一般不用进行删除操作）</li></ol><p>模板实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Trie<span class="token operator">*</span> children<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//大小写字母</span>    <span class="token keyword">bool</span> isword<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isprefix<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/** Initialize your data structure here. */</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** Inserts a word into the trie. */</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie<span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> Trie<span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>isprefix<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p<span class="token operator">-></span>isword<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** Returns if the word is in the trie. */</span>    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie<span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span><span class="token operator">!</span>p<span class="token operator">-></span>isword<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span>    <span class="token keyword">bool</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie<span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>prefix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span><span class="token operator">!</span>p<span class="token operator">-></span>isprefix<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h3><ol><li><p><strong>字母序排序</strong><br>问题描述：给定一些字符串，按字典序从小到大输出<br>解题思路：构建trie：每个结点的儿子按字母序排列。按先序遍历访问trie</p></li><li><p><strong>词典</strong><br>问题描述：假设有n个英文单词$w_1,…,w_n$.对每个单词$w_i$，有一个字符串为其中文翻译。如(‘apple’–‘苹果’)（‘banana’–‘香蕉’）。你需要写一个dictionary(词典）软件。用户输入一个串Q后，若Q=wi要输出wi的翻译。<br>解题思路：为$(w_1,…,w_n)$构造一个trie。$w_i$的键值设置为它的中文翻译。输入Q后，用O(|Q|)时间找到trie中对应Q的结点，输出其键值。</p></li><li><p><strong>词频统计 &amp; 关键词检测</strong></p></li><li><p><strong>单词自动提示功能</strong></p></li><li><p><strong>最长公共前缀</strong><br>问题描述：给定一些单词$w_1,…,w_n$。接下来将给你一系列查询。每个查询的形式为(i,j)：表示你需要回答$w_i与w_j$的最长公共前缀的长度。<br>解题思路：从所有单词建立一个trie。wi与wj的最长公共前缀的长度即它们所在结点的公共祖先个数，于是，问题就转化为了<strong>最近公共祖先</strong>（Least Common Ancestor，简称LCA）问题。</p></li></ol><h3 id="给点好题"><a href="#给点好题" class="headerlink" title="给点好题"></a>给点好题</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P2580">洛谷P2580错误的点名开始了</a></p><p>直接 上代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">trienode</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    trienode <span class="token operator">*</span>child<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isword<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//统计单词遍历次数</span>    <span class="token function">trienode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>count<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>isword<span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        trienode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>child<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                p<span class="token operator">-></span>child<span class="token punctuation">[</span>e <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> trienode<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>child<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p<span class="token operator">-></span>isword <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        trienode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>child<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"WRONG"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>child<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>isword<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"REPEAT"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"WRONG"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    trienode <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> trienode<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    string temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">search</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来一道：<a href="https://www.luogu.com.cn/problem/P5149">洛谷P5149</a></p><p>先上代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;memory.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_N</span> <span class="token expression"><span class="token number">100010</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> count<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> data_<span class="token punctuation">[</span>max_N<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">trienode</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    trienode <span class="token operator">*</span>children<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> order<span class="token punctuation">;</span>    <span class="token function">trienode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        trienode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                p<span class="token operator">-></span>children<span class="token punctuation">[</span>e <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> trienode<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>children<span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p<span class="token operator">-></span>order <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        trienode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>children<span class="token punctuation">[</span>e <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p<span class="token operator">-></span>order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> left<span class="token punctuation">,</span> k <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data_<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>data_<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            count<span class="token operator">+=</span>mid<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        data_<span class="token punctuation">[</span>left <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergesort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergesort</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>trienode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> trienode<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    string temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        data_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span><span class="token function">search</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">mergesort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题主要考察的其实是<strong>归并排序</strong>的写法，trie树是一个用来存字符串原先顺序的工具，此题中的trie树可以用hashmap来替代，这里顺便讲一下trie树和哈希表的区别。两者都可以用来进行搜索，trie树常用于字符串查询，复杂度为$O(m)$，m为key的长度，哈希表查找的复杂度决定于冲突，最好是$O(1)$，最坏是$O(n)$。trie常用于模糊搜索，而哈希表常用于精确搜索，此题我认为用hashmap更为简单和快速。</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>先讲KMP要解决的问题：<strong>串的模式匹配</strong>，即寻找给定子串在主串中的位置。</p><h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><p>在讲KMP之前，我想讲讲解决这种问题的一种最朴素的算法，BF算法，这是一种带回溯的穷举算法，KMP实则就是在回溯这一点上进行了优化。</p><p>基础思想：对每个$i(0≤i≤n-m)$，检查$S[i+1,i+m]$是否为T。</p><ul><li>若发现$S[i+1,i+m]$==T，匹配成功，返回 i+1。</li><li>如果以上全都不等于T则匹配失败，返回0。</li></ul><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这里串都是从1开始，S[0]不存数据，存个长度也行</span>i<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//匹配成功</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> i<span class="token operator">=</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//下个检查的开始</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//表示匹配失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂度分析：最坏情况下，$(n-m+1) * m＝O((n-m)*m)$，此时从任何位置i开始，都检查到串T的最后一位！最好情况下，一配就中！只比较了m次。而平均情况下可证明为$O(m+n)$</p><h3 id="KMP主过程"><a href="#KMP主过程" class="headerlink" title="KMP主过程"></a>KMP主过程</h3><p>KMP的设计思路，主要是对于如何避免搜索主串时的不必要回溯。<br>设计时要思考哪些是不必要的回溯，此处引入前后缀，找到0~j-1中最大整数k使得$T[1,j]$的长为k的前、后缀相等。然后i不变，令j=k即可。</p><p>主过程代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> i – m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> j <span class="token operator">=</span> pi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0.</span> <span class="token comment">//表示匹配失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预处理FAILURE-function"><a href="#预处理FAILURE-function" class="headerlink" title="预处理FAILURE function"></a>预处理FAILURE function</h3><p>这里是要对所匹配的子串进行预处理，$pi[j]$=最大的(非负)整数k使得$T[1,k]$是$T[1,j]$的真后缀。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pi<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pi<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> j <span class="token operator">=</span> pi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="放道例题"><a href="#放道例题" class="headerlink" title="放道例题"></a>放道例题</h3><p>找T的所有出现的KMP算法</p><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> pos<span class="token punctuation">;</span><span class="token keyword">char</span> S<span class="token punctuation">[</span>maxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">[</span>maxn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> pi<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>book<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">compute_pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    j<span class="token operator">++</span><span class="token punctuation">;</span>    pi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>pi<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> j <span class="token operator">=</span> pi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">string_Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>  j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        book<span class="token punctuation">[</span>i <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> pi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">//add something</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>      j<span class="token operator">=</span>pi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>       i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//add something</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gets</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gets</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">compute_pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">string_Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我承认我KMP讲的并不好，（逃</p><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><p>给定n个模式串和1个文本串，求有多少个模式串在文本串里出现过。<br>看似这似乎跟KMP要解决的问题没啥区别，但是我们不可能整n个failure function。于是我们引进了AC自动机，它有点类似于“在trie树上进行KMP”。</p><p>先上模板题：<a href="https://www.luogu.com.cn/problem/P3808">洛谷P3808AC自动机模板（简单版）</a></p><p>算法实现：首先我们要<strong>用n个模式串建一颗trie树</strong>，然后<strong>用文本串在上面进行匹配</strong>。每次匹配时，都要检查一下当前结点及其前缀是否构成一个模式串。</p><p>当我们无法在继续往下匹配的时候，我们要回到根结点重新开始匹配，那肯定不行，那就太low了。此时我们要想起KMP的实现，我们可以回溯到某个结点在开始匹配。此时我们将引入<strong>失配指针</strong>（Fail）来帮助我们完成回溯的过程。</p><p><strong>Fail</strong>: 如果一个点i的Fail指针指向j。那么root到j的字符串是root到i的字符串的能在trie树上找到的一个最长后缀。是不是有点眼熟？</p><p><strong>注意点：</strong></p><ol><li>每一个点i的Fail指针指向的点的深度一定是比i<strong>小</strong>的。</li><li>第一层结点的Fail一定指的是root。</li><li>在代码中可以假设出0号节点，让root为1，而让0号结点的所有儿子都指向root，即<code>trie[0].child[0~26]=1</code>，这样可以让所有回溯到的0的都能回到根节点（其实不用也行）</li></ol><p><strong>关键点：</strong></p><ul><li>当前结点i的Fail的指向实则是由父亲结点的FaFail所决定的，其应指向fafail的与i值相等的儿子结点即<code>trie[cur].fail=trie[trie[fa].fail].son[cur];</code></li><li>倘若当前结点i不存在怎么办，我们同样可以进行路径优化，将该节点直接等于fafail的对应值的儿子结点，即<code>trie[fa].son[cur]=trie[tire[fa].fail].son[cur];</code>，但注意不存在的不需要压入队列</li><li>由失配指针fail的处理，我们可以得知想要处理i结点就必须先处理i的父亲结点，所以我们可以一层层的来调配失配指针，即使用<strong>bfs</strong>。</li></ul><p>getfail过程代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        trie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//0号结点的所有儿子都为root</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root压入队列</span>    trie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//指向0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拿出队首结点，作为父亲节点</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">;</span><span class="token comment">//拿出fafail</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历其所有儿子结点</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//儿子结点如果不存在</span>                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//关键点2</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//不要压入队列，快逃！</span>            <span class="token punctuation">&#125;</span>            trie<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>fail <span class="token operator">=</span> trie<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//关键点1，可以发现如果此时f=0,其所有child都为1</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询过程：</p><p>查询就是不断跳fail嘛，毕竟fail是最长后缀，当前的如果可以匹配，那后缀当然也行，由于数据中存在重复单词，所以对于每个结点都有一个<strong>flag来进行计数</strong>，ans不断累加，并在累加后<strong>将flag置为-1</strong>，以避免重复叠加，跳fail的过程当<strong>跳回根节点或者跳到flag为-1的重复结点</strong>就结束。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> e <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span class="token comment">//累加计数</span>            trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//避免重复 </span>            k <span class="token operator">=</span> trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        u <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//跳trie</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放上完整代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> flag<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> fail<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>trienode<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span>trienode trie<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//cnt记几号结点</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> e <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        u <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//重复字符串</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        trie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> f <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            trie<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>fail <span class="token operator">=</span> trie<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> e <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>            trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        u <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    string temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">query</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加一道加强版：<a href="https://www.luogu.com.cn/problem/P3796">洛谷P3796ac自动机加强版</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> flag<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> fail<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fail<span class="token operator">=</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>trienode<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span>trienode trie<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>string s1<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vision<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>num<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> e <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        u <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        trie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> f <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            trie<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>fail <span class="token operator">=</span> trie<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> e <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span>                vision<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> trie<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        u <span class="token operator">=</span> trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>child<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    string temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>            s1<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        <span class="token function">query</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> vision<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vision<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ans<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            trie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        num <span class="token operator">=</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vision<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vision<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> trie </tag>
            
            <tag> kmp </tag>
            
            <tag> ac自动机 </tag>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战校赛（4）</title>
      <link href="/2021/09/07/erfen/"/>
      <url>/2021/09/07/erfen/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点整理（4）二分查找与二分答案"><a href="#知识点整理（4）二分查找与二分答案" class="headerlink" title="知识点整理（4）二分查找与二分答案"></a>知识点整理（4）二分查找与二分答案</h1><p>二分，一个看似简单却在细节部分折磨死人的东西。</p><h2 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h2><ul><li>应用前提：要求表中元素以及所求答案按关键字单调有序排列。</li><li>两者面向的大概问题：在一个有序序列中查找一个想要的数。</li></ul><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找的细节大概有三点：</p><ol><li>while循环的结束条件到底是left小于right,还是小于等于。</li><li><code>(l=mid+1 or l=mid) and (r=mid-1 or r=mid)</code></li><li>计算 mid 时需要技巧防止溢出，建议写成: <code>mid = left + (right - left) / 2</code></li><li>边界为浮点时，循环条件要控制精度，更新区间不能+1（为什么有四点）</li></ol><p>对于第一点，我的思路就是，自己把程序在脑中模拟一下，看看最后需不需要将left==right的情况加上（听君一席话了属于是）。<br>对于第二点的话，主要看mid用不用的上，用得上就要留着，别加1溜了，不过也可以同步用一个变量随时记录当前mid，这样再说。<br>下面给出一些二分查找的应用场景：</p><h3 id="找一个数"><a href="#找一个数" class="headerlink" title="找一个数"></a>找一个数</h3><p>最简单的应用，直接上代码，抉择看注释：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这边当等于的时候，此时对应的数还没查找，所以要加上</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//错误示范了属于是</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token comment">//找到</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//由于这里mid不是所要找的数就没用了，所以不用包括mid</span>            <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//没找到</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找左边界"><a href="#找左边界" class="headerlink" title="找左边界"></a>找左边界</h3><p>例子：找序列中大于某个数的第一个数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//并非完全适用请具体问题具体分析</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这边当等于的时候，此时对应的数已经被check过了，所以不用加上</span>            mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//改错就改了属于是</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>r<span class="token operator">=</span>mid<span class="token punctuation">;</span><span class="token comment">//由于这里mid可能是所要找的数，所以需要包括mid</span>            <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//lower_bound和upper_bound真不错真不搓</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找右边界"><a href="#找右边界" class="headerlink" title="找右边界"></a>找右边界</h3><p>例子：找序列中小于某个数的最后一个数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这边当等于的时候，此时对应的数已经被check过了，所以不用加上</span>            mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//改错就改了属于是</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token punctuation">;</span><span class="token comment">//由于这里mid可能是所要找的数，所以需要包括mid</span>            <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h2><ul><li>基本思想：在答案可能的范围内$[L,R]$二分查找答案，检查当前答案是否满足题目的条件要求，根据判断结果更新查找区间。</li></ul><p>下面同样给出应用场景：</p><h3 id="求最大的最小值"><a href="#求最大的最小值" class="headerlink" title="求最大的最小值"></a>求最大的最小值</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P2678">洛谷P2678 跳石头</a></p><p>此题是求最大的最短跳跃距离</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">50010</span><span class="token punctuation">;</span>ll L<span class="token punctuation">,</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span>ll dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ll pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//记录小于最短的，代表要拿开的岩石</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span>M<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//要拿开的超过了最多岩石的限制</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> L <span class="token operator">>></span> N <span class="token operator">>></span> M<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> L<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ans<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对最短距离进行二分</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">binary</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查答案</span>            ans <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token comment">//记录ans</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//return true代表还可以继续往右边搜索</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span>            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来一题：<a href="https://www.luogu.com.cn/problem/P1824">洛谷P1824进击的奶牛</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> lnf <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> max_N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">[</span>max_N<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>ans<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> last<span class="token punctuation">&#123;</span><span class="token operator">-</span>lnf<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>count<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>last<span class="token operator">>=</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            last <span class="token operator">=</span> N<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count <span class="token operator">>=</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> L<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> R<span class="token punctuation">&#123;</span>lnf<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;=</span>R<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> L <span class="token operator">+</span> R <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            L <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            R <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求最小的最大值"><a href="#求最小的最大值" class="headerlink" title="求最小的最大值"></a>求最小的最大值</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1525">洛谷P1525关押罪犯</a></p><p>此题实则是求最小的最大矛盾值，下面的题解的check函数中使用的是bfs来进行二分图染色，染色成功就返回true，而且下面的二分中涉及到了另外一种二分方式，即通过target的相邻元素是否在答案区间中来判断。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100000</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> to<span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token keyword">int</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edge<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//快读</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> fu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ch<span class="token operator">&lt;=</span><span class="token number">32</span><span class="token punctuation">;</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fu<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> ch<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">;</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token operator">*</span>fu<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token comment">//存有向图</span><span class="token punctuation">&#123;</span>edge<span class="token punctuation">[</span><span class="token operator">++</span>sum<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>edge<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span>y<span class="token punctuation">;</span>edge<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>z<span class="token punctuation">;</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> midd<span class="token punctuation">)</span> <span class="token comment">//bfs进行二分图染色</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> color<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>color<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">>=</span>midd<span class="token punctuation">)</span><span class="token comment">//矛盾值大于等于所给值就进行二分图染色（题目中表示放在两个监狱）</span>  <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   color<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">=</span>color<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//表示染色失败</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> maxx<span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>maxx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>midd<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token comment">//这里注意！</span><span class="token punctuation">&#123;</span>midd<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>midd<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>midd<span class="token punctuation">;</span><span class="token keyword">else</span> l<span class="token operator">=</span>midd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求满足条件的最大（小）值"><a href="#求满足条件的最大（小）值" class="headerlink" title="求满足条件的最大（小）值"></a>求满足条件的最大（小）值</h3><p>原题链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1969">hdu 1969平均分pie</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>f<span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">10100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> s <span class="token operator">=</span> r<span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> tep <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tep<span class="token operator">/</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> num <span class="token operator">>=</span> f<span class="token operator">+</span><span class="token number">1</span><span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//f+1因为要分给自己</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>f<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cin<span class="token operator">>></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">10100.0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">></span>eps<span class="token punctuation">)</span>  <span class="token comment">//注意精度,相当于浮点数版本的l&lt;r</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>                 l <span class="token operator">=</span> mid<span class="token punctuation">;</span>             <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4f\n"</span><span class="token punctuation">,</span>r<span class="token operator">*</span>r<span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 二分答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战校赛（3）</title>
      <link href="/2021/09/06/stl/"/>
      <url>/2021/09/06/stl/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点整理（3）STL常用"><a href="#知识点整理（3）STL常用" class="headerlink" title="知识点整理（3）STL常用"></a>知识点整理（3）STL常用</h1><p>本篇突发奇想来记录一下平时刷题的时候容易用到的API，免得每次都去百度搜（开一堆csdn的窗口hhhh）。</p><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><p>以下算法基本都在$algorithm$头文件中</p><ol><li><p><strong>lower_bound（begin,end,num）</strong>:该函数常常用于在一个排好序的数组中查找第一个大于等于num的数，其需要三个参数，第一个是查找范围的起始迭代器或地址，第二个是结束点，第三个就是需要比较的数。其返回查找到的数的迭代器，如果查找不到就返回<code>xxx.end()</code>。所以使用的时候往往减去起始地址来获取索引，例子如下：<code>int index=lower_bound(nums.begin(),nums.end(),cnt)-nums.begin();</code><br>该函数底层实现为二分查找（这玩意之后应该会单开一章讲），时间复杂度为$O(logn)$。</p></li><li><p><strong>upper_bound（begin,end,num）</strong>:把上面的大于等于变成大于，over。</p></li><li><p>上述两个函数都可以加第四个参数，即<code>greater&lt;type&gt;()</code>，加了之后大于等于变成小于等于，大于变小于。</p></li><li><p><strong>sort（begin,end,mycmp）</strong>:懒人排序必备，注意的是自定义比较函数的编写，当return true的时候表示第一个数放在前面，第三个参数可以用greater来替代，表示从大排到小。</p></li><li><p><strong>max、min</strong>:不必多说，只用知道也可以自定义比较函数就行了。</p></li><li><p><strong>reverse（begin,end）</strong>: 常用于数组，字符串，容器中元素的反转，底层是遍历调用swap，所以时间复杂度为$O(n)$。</p></li><li><p><strong>remove（begin,end,val）</strong>:remove并不是删除，只是把给定序列中不等于val的所有数移动到序列前面，最后返回该序列最后一个不等于val的数的末尾的地址</p></li><li><p><strong>copy（begin,end,new_begin）</strong>:将前两个参数所给定的序列复制到第三个参数的序列中，第三个参数给的序列要先初始化</p></li><li><p><strong>unique（begin,end）</strong>:对给定序列中的元素进行去重，但是并不是删除，而是像remove一样将相邻的重复元素移到后面去，在使用前要先排序，返回值是一个迭代器，它指向的是去重后容器中不重复序列的最后一个元素的下一个元素。实操起来会发现，最后得到的序列其实在返回的迭代器后面还有元素，就是一堆去重序列最后一个元素的复制。（离散化往往用得上）</p></li><li><p><strong>distance（begin,end）</strong>:用于计算两个迭代器表示的范围内包含元素的个数</p></li><li><p><strong>find_if（begin,end,mycmp）</strong>:它可以在前两个参数指定的范围内查找可以使第三个参数指定的谓词返回 true 的第一个对象。谓词不能修改传给它的对象。</p></li><li><p><strong>transform(first,last,result,op)</strong>:first是容器的首迭代器，last为容器的末迭代器，result为存放结果的容器，op为要进行操作的一元函数对象或sturct、class。比如op是一个将小写字母转为大写字母的函数，则这个就可以将first到last的元素中所有小写转大写并将结果的首迭代器存在result中</p></li></ol><h2 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h2><p>这里是介绍一些常用数据结构的API</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>不必多说，基本算是用的最多的了，相当于能动态插入和删除的数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化n个元素</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尾部插入元素</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除尾部元素</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>iterator it<span class="token punctuation">,</span>T val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在it的前面插入val</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定范围中的元素</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//元素个数</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//复制另一个vector的内容</span>v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个元素</span>v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string这个这么常见的东西当然也算常用数据结构啦。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token operator">=</span><span class="token string">"adkajda1"</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//长度</span><span class="token comment">//迭代器和[]都可以进行遍历</span>s<span class="token operator">+=</span><span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//+运算符已被重载，方便！</span>string s1<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引3开始连续5个字符组成的子串，注意索引从0开始</span><span class="token keyword">int</span> pos<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二个参数和第三个参数代表从起始查询位置1起的6个字符，返回值是子串在母串中的位置（下标记录），如果没有找到，那么会返回一个特别的标记string::npos。</span><span class="token keyword">auto</span> pos2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引为9的地方开始反着寻找子串</span>s1<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//都是字面意思</span>s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>len<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用str替换指定字符串从起始位置pos开始长度为len的字符,这个函数用法请参照https://blog.csdn.net/cai_niaocainiao/article/details/81260902</span>std<span class="token double-colon punctuation">::</span><span class="token function">replace</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串中所有的1变成2，但是要注意的是只能替换一个字符</span>s2<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取s1从起始位置7开始长度为3的子串</span>s2<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment">//aaaaa</span>s2<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从位置pos=6处开始，删除4个字符,第二个参数不给出将默认为结尾</span>s2<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//// 从位置pos=10处开始删除，直到结尾</span>s3<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转成const char*型</span>s3<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment">//s3="123",to_string实现将数字直接转成字符串，好用</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span><span class="token string">"12331"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将string类型转换成int,atoi是将const char*转成int</span><span class="token keyword">float</span> b<span class="token operator">=</span><span class="token function">stof</span><span class="token punctuation">(</span><span class="token string">"123.123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string转float</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哈希容器"><a href="#哈希容器" class="headerlink" title="哈希容器"></a>哈希容器</h3><p>散列表（Hash table，也叫哈希表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这<strong>加快了查找速度</strong>。这个映射函数称做散列函数，存放记录的数组称做散列表。<br>STL中包括两个常用的哈希数据结构，<strong>unordered_map和unordered_set</strong>，这两个容器都可以使用迭代器来进行遍历（其实一般不用遍历），都没法用[]来遍历。使用哈希容器一般是用于查找键值，要注意的是<strong>键是唯一</strong>的。</p><h4 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h4><p>其与map都为关联容器，都是存键值对的。其与map不同的地方是，map底层是用红黑树实现的，查询和修改都是$O(logn)$的时间复杂度，而unordered_map查询是$O(1)$的，快就完事了。但哈希容器都是无序的，所以对于那些有顺序要求的题，还得用map。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>string<span class="token operator">></span> um<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"234"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化方式</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>um<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//存键值对方式</span>um<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入一个pair</span>um<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回键值对个数</span><span class="token comment">//下列三种查找方式</span>str1<span class="token operator">=</span>um<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//通过[]</span>str2<span class="token operator">=</span>um<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span>it<span class="token operator">=</span>um<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过find方法,返回迭代器</span><span class="token keyword">int</span> a<span class="token operator">=</span>it<span class="token operator">-></span>first<span class="token punctuation">;</span>string b<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token comment">//迭代器取值</span><span class="token comment">//erase的三种用法</span><span class="token keyword">int</span> n<span class="token operator">=</span>um<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回删除元素的个数，如果返回0代表没找到</span>it<span class="token operator">=</span>um<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的迭代器指向被移除元素后的元素,如果返回end()代表没找到</span>it<span class="token operator">=</span>um<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定序列，返回的迭代器指向被移除的最后一个元素的下一个位置。</span><span class="token comment">//遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token operator">:</span>um<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//a是key,b是值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h4><p>首先说明一下，unorder版本的map和set只提供前向迭代器（非unorder版本提供双向迭代器）。<br>其与set相同的是其中都没有相同元素，且不能被修改。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>us<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>us<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入新元素，此时它会返回一个 pair 对象，这个 pair 对象包含一个迭代器，以及一个附加的布尔值用来说明插入是否成功。如果元素被插入，返回的迭代器会指向新元素；如果没有被插入，迭代器指向阻止插入的元素</span>us<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只返回迭代器</span><span class="token comment">//emplace同上</span>us<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找元素是否在容器中，返回对应迭代器，不存在则返回us.end()</span>us<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计该键在容器中的个数，返回1或者0</span>us<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过迭代器删除，配合find常用,返回被删除元素的个数</span>us<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据键值删除</span>us<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>us<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// erasing by range</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><p>栈是filo序列（先进后出），而队列是fifo序列（先进后出）。而在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出的特征。</p><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>只能访问栈顶元素，不能遍历,不能直接用对象进行初始化，但是可以用list来初始化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>只能在容器的末尾添加新元素，只能从头部移除元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//常用取对首</span>a<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>每次插入和删除元素时，优先队列内部都会自动维护，让优先级高的元素出现在顶部。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q1<span class="token punctuation">;</span><span class="token comment">//小顶堆，记得第三个参数到末尾要有空格，不然就变成右移运算符了</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>q<span class="token punctuation">;</span><span class="token comment">//大顶堆，默认</span>priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> a<span class="token punctuation">;</span><span class="token comment">//pair的比较，先比较第一个元素，第一个相等比较第二个。</span><span class="token comment">//下面是自定义比较方式</span><span class="token comment">//方法1</span><span class="token keyword">struct</span> <span class="token class-name">tmp1</span> <span class="token comment">//运算符重载&lt;</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">tmp1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> tmp1<span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">//大顶堆</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方法2</span><span class="token keyword">struct</span> <span class="token class-name">tmp2</span> <span class="token comment">//重写仿函数</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tmp1 a<span class="token punctuation">,</span> tmp1 b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">//大顶堆</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tmp1 <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp1 <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp1 <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>tmp1<span class="token operator">></span> d<span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>tmp1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>tmp1<span class="token operator">></span><span class="token punctuation">,</span> tmp2<span class="token operator">></span> f<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战校赛（2）</title>
      <link href="/2021/09/03/gaojing/"/>
      <url>/2021/09/03/gaojing/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点整理（2）高精"><a href="#知识点整理（2）高精" class="headerlink" title="知识点整理（2）高精"></a>知识点整理（2）高精</h1><p>本次介绍的知识点是应对特定数据范围的一些方法</p><h2 id="高精"><a href="#高精" class="headerlink" title="高精"></a>高精</h2><p>高精度，顾名思义是用于解决输入数字位数过大而超出int乃至longlong范围的一种方法，下面将逐一举例。</p><h3 id="高精加法"><a href="#高精加法" class="headerlink" title="高精加法"></a>高精加法</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1601">洛谷P1601A+Bproblem</a>（其实就是A+B问题的高精版本</p><p>解题方法：本题思路没啥好说的，就是A+B，下面主要讲如何实现高精加法，其实就是用一个数组来存储一个数，两个数相加即是让对应数位相加，然后进行进位操作，相加后便使进1，即让下一数位加一，然后本数位对10取余。</p><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a1<span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> b1<span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        b1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        c<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放上另外一题：<a href="https://www.luogu.com.cn/problem/P1009">洛谷P1009阶乘之和</a></p><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> count<span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高精减法"><a href="#高精减法" class="headerlink" title="高精减法"></a>高精减法</h3><p>处理时被减数一定要比减数大，所以操作过程中要随时检测减数位数，如果减出来的负数，被减数需要向下一位借1。</p><p>模板：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//特判</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> n1<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n2<span class="token operator">></span>n1<span class="token operator">||</span><span class="token punctuation">(</span>n1<span class="token operator">==</span>n2<span class="token operator">&amp;&amp;</span>b<span class="token operator">></span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//保证大的是被减数</span>        string temp<span class="token operator">=</span>a<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> temp<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    n1<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        c<span class="token punctuation">[</span>n1<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment">//注意字符串从小到大位数逐渐减小，因此应该反存</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        d<span class="token punctuation">[</span>n2<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>t<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>n2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>                    c<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">-</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//借1</span>        <span class="token keyword">else</span>            t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> count<span class="token punctuation">&#123;</span>n1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//去除前置0</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">'-'</span><span class="token punctuation">;</span><span class="token comment">//输出负号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>坑点</strong>：</p><ol><li>字符串的第一位实际上该数字最高的位数，因此存到数组时要反着存</li><li>要用取余操作保证存进答案数组的为正数（用来凑数的坑）</li><li>最后要去除前置0，再输出答案</li></ol><h3 id="高精乘法"><a href="#高精乘法" class="headerlink" title="高精乘法"></a>高精乘法</h3><p>代码模板（高精乘低精）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//懒得自己写，该模板来自https://www.cnblogs.com/limitedInfinite/p/14747835.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高精除法"><a href="#高精除法" class="headerlink" title="高精除法"></a>高精除法</h3><p>代码模板（高精除低精）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token comment">//除法从大的位数开始</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有关爆精"><a href="#有关爆精" class="headerlink" title="有关爆精"></a>有关爆精</h2><p>最后讲讲爆精度这档子事，很多时候我们看到数据范围是$2^{31}$,就觉得不会爆int，很自然的用了int，最后却莫名其妙的过不了。<br>事实上，两个int类型的数相加或者相乘是很容易爆精度的，很多题就在这设置了一个坑，所以longlong永远的神（雾）。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战校赛（1）</title>
      <link href="/2021/09/02/chafen/"/>
      <url>/2021/09/02/chafen/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点整理（1）差分-前缀和"><a href="#知识点整理（1）差分-前缀和" class="headerlink" title="知识点整理（1）差分/前缀和"></a>知识点整理（1）差分/前缀和</h1><p>本系列是为中大校赛做准备，顺便整理目前学到的算法知识点。</p><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="一维前缀和及基础知识点"><a href="#一维前缀和及基础知识点" class="headerlink" title="一维前缀和及基础知识点"></a>一维前缀和及基础知识点</h3><ul><li>定义：对于一个数组，如a[5]=[1,2,3,4,5]，维护一个前缀和数组sum[5],其中sum[i]=a[0]+···a[i]。</li><li>经典应用：<strong>区间求和</strong>，如求a[1]+···a[3]的和，即ans=sum[3]-sum[0];</li></ul><h4 id="例一：随机权重问题"><a href="#例一：随机权重问题" class="headerlink" title="例一：随机权重问题"></a>例一：随机权重问题</h4><p><strong>原题链接</strong>：<a href="https://leetcode-cn.com/problems/random-pick-with-weight/">leetcode528按权重随机选择</a></p><p><strong>解题思路</strong>：此题的含义便是谁权重大谁被选中的概率就高，而解题便可以将权重化成实质性的数字，如权重为3，就占3个数，即对于[3,5,2]，3代表1,2,3，5代表4,5,6,7,8，2代表9,10，于是生成一个10以内的随机数判断其在哪个范围以选择数字。<br>具体操作就是<strong>对于权重数组生成一个前缀和数组</strong>，然后通过二分查找(lower_bound)来查找生成的随机数在哪个范围。</p><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>nums<span class="token punctuation">;</span>    <span class="token function">Solution</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n<span class="token operator">=</span>w<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">pickIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token operator">-</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前缀和其实更贴近一种思想，不会专门提，但是在很多题中都会用到。</p><h3 id="二维前缀和与容斥原理"><a href="#二维前缀和与容斥原理" class="headerlink" title="二维前缀和与容斥原理"></a>二维前缀和与容斥原理</h3><p>定义：先假设出以下二维矩阵a</p><pre class="line-numbers language-none"><code class="language-none">1 2 4 35 1 2 46 3 5 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>二维前缀和即可定义为$sum_{x,y}=\sum\limits_{i=1}^x\sum\limits_{j=1}^ya_{i,j}$，则对应二维前缀和矩阵sum如下</p><pre class="line-numbers language-none"><code class="language-none">1  3  7  106  9  15 2212 18 29 45<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为<strong>容斥原理</strong>。</p><p>经典应用：利用容斥原理，来求<strong>子矩阵的和</strong>。显然在求二维前缀和时为<br>$$sum_{x,y}=sum_{x-1,y}+sum_{x,y-1}-sum_{x-1,y-1}+a_{x,y}$$<br>    ps:实际操作是可在矩阵外围包上一层0以避免越界问题<br>而求和时，如求$(x_1,y_1)-(x_2,y_2)$的子矩阵和为<br>$$ans=sum_{x2,y2}-sum_{x1-1,y2}-sum_{x2,y1-1}+sum_{x1-1,y1-1}$$</p><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">NumMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//题目要求</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>很多人会把差分定义为前缀和的逆过程，但是我认为差分在很多题解中更像是对求前缀和的一种预处理，使像区间修改等的一些过程变得更加迅速。</p><h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><ul><li>定义：将前缀和数组还原成原数组的过程，即</li></ul><p>$$ a[i]=\left\lbrace<br>\begin{array}{llc}<br>sum[i] &amp; i=1 &amp; \\<br>sum[i]-sum[i-1] &amp; i&gt;1 &amp;<br>\end{array}<br>\right.<br>$$</p><ul><li>经典应用：<strong>区间修改</strong>，如让一个数组中a[1]到a[3]都加上一个数，如果用常规的方法，每次修改都可能达到$O(n)$的复杂度，这显然无法接受，而差分则是利用巧妙的方式完成了这个过程。</li></ul><h4 id="例一：航班预订统计"><a href="#例一：航班预订统计" class="headerlink" title="例一：航班预订统计"></a>例一：航班预订统计</h4><p><strong>原题链接</strong>：<a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">leetcode1109航班预订统计</a></p><p><strong>题解</strong>：这可以说差分典中典题了，题目翻译一下就是给定n条记录，m条修改，每次修改对于[first,last]这个区间里的每个数都加1，差分的操作如下：</p><ul><li>对于每条修改，令a[first]++,a[last+1]–,最后执行完所有修改后，再求前缀和，sum[n]即为答案</li></ul><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> bookings<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>bookings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>ans<span class="token punctuation">[</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-=</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>先定义出一个初始化为零的二维矩阵，然后修改子矩阵的值，这就是二维差分最经典的应用</p><h4 id="例一：子矩阵修改"><a href="#例一：子矩阵修改" class="headerlink" title="例一：子矩阵修改"></a>例一：子矩阵修改</h4><p>原题链接：<a href="https://www.luogu.com.cn/problem/P3397">洛谷P3397地毯</a></p><p>解题思路：假设要使$(x_1,y_1)-(x_2,y_2)$这个子矩阵中的值都加1，只需执行以下步骤：<br>$$a_{x1,y1}++,a_{x1,y2+1}–,a_{x2+1,y1}–,a_{x2+1,y2+1}++$$<br>这里同样运用了容斥原理。最后求二维前缀和即可得出答案。</p><p>代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> map_<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map_<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>map_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对差分数组的预处理</span>        cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y2<span class="token punctuation">;</span>        map_<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        map_<span class="token punctuation">[</span>x2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        map_<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        map_<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//求二维前缀和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> map_<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> map_<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//输出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> map_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>树上前缀和及差分未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 差分 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题day1</title>
      <link href="/2021/08/12/leetcode1/"/>
      <url>/2021/08/12/leetcode1/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode今日两题-动态规划（1）"><a href="#leetcode今日两题-动态规划（1）" class="headerlink" title="leetcode今日两题-动态规划（1）"></a>leetcode今日两题-动态规划（1）</h1><h2 id="313、超级丑数"><a href="#313、超级丑数" class="headerlink" title="313、超级丑数"></a>313、超级丑数</h2><p>原题链接：”<a href="https://leetcode-cn.com/problems/super-ugly-number/&quot;">https://leetcode-cn.com/problems/super-ugly-number/&quot;</a></p><p>本题此处提供两种解法，<strong>Key:新的丑数=旧的丑数Xprimes序列中的数</strong>。</p><h3 id="1-优先队列-哈希集合"><a href="#1-优先队列-哈希集合" class="headerlink" title="1.优先队列+哈希集合"></a>1.优先队列+哈希集合</h3><ol><li>先将1加入最小堆</li><li>然后将堆顶元素弹出</li><li>用该元素乘上primes中所有数并将其加入堆中</li><li>由于会出现重复，所以使用哈希集合来去重</li><li>重复以上234步骤n次</li></ol><p>(ps:也可以用底层为红黑树的set来一步到位，但效率较差，经比较大概比以上方法慢了一倍)</p><p>以下为代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthSuperUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> primes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_set<span class="token operator">&lt;</span>ll<span class="token operator">></span>s<span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>ll<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>ll<span class="token operator">></span> <span class="token operator">></span>q<span class="token punctuation">;</span><span class="token comment">//最小堆，记得greater那要留多个空格</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll cnt<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cnt<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>primes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ll temp<span class="token operator">=</span>cnt<span class="token operator">*</span>e<span class="token punctuation">;</span><span class="token comment">//用long long是因为这一步有可能爆精</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//哈希集合的find方法，找不到即返回s.end()</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度约为$O(mnlogn)$</p><h3 id="2-动态规划（非严谨）"><a href="#2-动态规划（非严谨）" class="headerlink" title="2.动态规划（非严谨）"></a>2.动态规划（非严谨）</h3><p><strong>核心：用multi数组决定要序列中的数要乘哪个旧丑数</strong></p><p>为了保证预备丑数序列的递增性，所以要用尽量小的旧丑数去乘primes中的数，但之前生成过丑数的组合不能再相乘，因此其要向前进一，multi数组储存的是primes数组中对应数字在这次计算中需要相乘的旧丑数的index。<br>同时由于丑数序列的递增性，如果出现重复必然是与前一个数重复，所以通过简单的判断即可排除重复情况<br>下面是代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthSuperUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> primes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">></span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">></span><span class="token function">multi</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ll minv<span class="token operator">=</span>INT_MAX<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>            <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token operator">=</span>dp<span class="token punctuation">[</span>multi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//旧丑数乘primes中数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>minv<span class="token operator">></span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//找最小值</span>                    minv<span class="token operator">=</span>temp<span class="token punctuation">;</span>pos<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//获取生成该丑数对应primes中的数字</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>minv<span class="token punctuation">)</span><span class="token comment">//避免重复</span>                dp<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minv<span class="token punctuation">;</span>            multi<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//关键</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经检验，该方法时间复杂度为$O(mn)$，但实测比第一种快了好几倍。</p><h2 id="446、等差数列划分"><a href="#446、等差数列划分" class="headerlink" title="446、等差数列划分"></a>446、等差数列划分</h2><p>原题链接：”<a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/&quot;">https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/&quot;</a></p><h3 id="序列dp"><a href="#序列dp" class="headerlink" title="序列dp"></a>序列dp</h3><p><strong>弱等差子序列</strong>：一个序列中至少有<strong>两个元素</strong>，并且任意两个相邻元素之差相同。（显然任何一对元素都满足）</p><p>状态描述：dp[i][d]表示<strong>以nums[i]为结尾，公差为d</strong>的弱等差子序列个数。dp[i]应该是一个「集合」，该集合记录下了所有以nums[i]为结尾，差值为所有情况的子序列的个数。</p><p>推导：设i,j（j &lt; i）来做二重循环，其中nums[i]为子序列结尾，nums[j]为倒数第二。循环的目的是对于每个i,枚举区间[0, i - 1]的所有数。<strong>枚举当前位置前面的所有位置的目的，是为了找到当前位置的数，能够接在哪一个位置的后面，形成序列</strong>。<br>对于每个i,j，记d=nums[i]-nums[j],需要去找dp[j][d]，因为将nums[i]插到以nums[j]结尾的子序列中，构成以nums[i]为结尾的子序列，再nums[j],nums[i]也构成一个弱等差子序列，因此得出转移方程：$dp[i][d]+=dp[j][d]+1$;<br>而因为差值d有可能会过大爆精，但差值本身的数量是有限的，因此选用longlong和哈希map,至于答案便是递推过程中dp[j][d]的求和<br>代码实现如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ll <span class="token function">numberOfArithmeticSlices</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ll ans<span class="token punctuation">&#123;</span><span class="token number">0LL</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>unordered_map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">dp</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//哈希map快</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ll d<span class="token operator">=</span><span class="token number">1LL</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//可能爆精</span>                <span class="token keyword">auto</span> it<span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找是否有dp[j][d]</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cnt<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span>                <span class="token keyword">else</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>cnt<span class="token punctuation">;</span><span class="token comment">//加和答案</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//转移方程</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为$O(n^2)$.</p><h2 id="516、最长回文子序列"><a href="#516、最长回文子序列" class="headerlink" title="516、最长回文子序列"></a>516、最长回文子序列</h2><p>原题链接：”<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/&quot;">https://leetcode-cn.com/problems/longest-palindromic-subsequence/&quot;</a></p><h3 id="序列dp-1"><a href="#序列dp-1" class="headerlink" title="序列dp"></a>序列dp</h3><p>类似上面那道等差子序列，都是处理具有某种性质的子序列。</p><p>状态描述：dp[i][j]表示<strong>在区间[i,j]中最长回文子序列的长度</strong>，题目求的就是dp[0][n-1] （n为字符串长度,i &lt; j）</p><p>推导过程：设字符串为s，由于所有的单个字符都为回文串，所以所有的dp[i][i]都为1，而在[i,j]区间中对s[i]和s[j]分两种情况讨论:</p><ol><li>当s[i]==s[j]，那么直接将这两个字符加入[i+1,j-1]的最长回文串中即可，即转移方程为 $dp[i][j]=dp[i+1][j-1]+2$;</li><li>当s[i]!=s[j]，那么其并不能改变目前的最长回文串，dp[i][j]等于比[i,j]小一点点的区间里的dp值，即转移方程为 $dp[i][j]=max(dp[i+1][j],dp[i][j-1])$;</li></ol><p>$$<br>dp[i][j]=\left\lbrace<br>\begin{array}{llc}<br>1 &amp; i==j  \\<br>dp[i+1][j-1]+2 &amp; s[i]==s[j]  \\<br>max(dp[i+1][j],dp[i][j-1]) &amp; s[i]!=s[j]<br>\end{array}<br>\right.<br>$$</p><p>解题中需注意<strong>计算顺序</strong>，我下面写的题解是i从后往前递推，对于每个i,都让j从i+1开始往后递推，这样实质上保证了在计算dp[i][j]时，dp[i+1][j-1],dp[i][j-1],dp[i+1][j]都已经计算好了。（虽然我也写了从前往后递推的版本）</p><p>下面是代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于二维数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//单个字符都为回文</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//分类讨论</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为$O(n^2)$.</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo学习记录2(帅，是一辈子的事)</title>
      <link href="/2021/08/03/matery/"/>
      <url>/2021/08/03/matery/</url>
      
        <content type="html"><![CDATA[<p><del>全文建议配合梯子食用</del></p><h1 id="hexo主题美化，让你的博客焕然一新"><a href="#hexo主题美化，让你的博客焕然一新" class="headerlink" title="hexo主题美化，让你的博客焕然一新"></a>hexo主题美化，让你的博客焕然一新</h1><p>上篇博客中，我讲完了如何利用hexo和githubpage初步在你的ubuntu上搭好一个博客网站，但这样搭出来的网站显然不太符合我们代码人的口味(可能只有我不太喜欢？)。而这篇博客就是教你让你的hexo换个主题，并且做yi点点自定义的美化，本文选用的博客的主题是<strong>matery</strong>，也是我的博客正在使用的主题。</p><h2 id="matery主题"><a href="#matery主题" class="headerlink" title="matery主题"></a>matery主题</h2><p>matery主题是一个采用<code>Material Design</code> 和响应式设计的 Hexo 博客主题，这是<a href="https://github.com/blinkfox/hexo-theme-matery">它的github仓库地址</a>，点击<a href="https://wdstql.github.io/">这里</a>查看演示效果(其实就是我的主页)。</p><h3 id="安装与切换主题"><a href="#安装与切换主题" class="headerlink" title="安装与切换主题"></a>安装与切换主题</h3><p>在你博客根目录下的theme文件夹打开终端，键入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后，你的theme文件夹下就会多出一个hexo-theme-matery的文件夹，切换主题也很简单，只需打开博客根目录下的<code>_config.yml</code>文件，找到theme，将它的值由landscape修改为hexo-theme-matery。</p><h3 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h3><p>打开根目录下的<code>_config.yml</code>文件(主题文件夹和博客根目录下各有一个同名文件，请区分开)，修改title，subtitle为自己想要的，并自行查看效果，language改为zh-CN。</p><p>接下来的一系列对于该主题的基础配置，请自行查阅主题作者写的官方文档，不知道比我写得高哪里去了，点击<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">此处</a>可查。下文只讲我在查阅该文档时遇到的问题以及一些其他的个性化配置。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><pre><code>本处内容是基于我浅薄的认识写的</code></pre><p>首先先讲一下matery主题文件夹下各个文件和文件夹的作用(其实就讲两个).最重要的是<code>_config.yml</code>文件,负责管理网站的总设置，用于添加或开关网站中的某功能。一个是<code>layout</code>，管理着网站各个部分的格式和结构.一个是<code>source</code>,存放着对网站各处的美化和<strong>本地图片的源文件</strong>。也就是说你在<code>_config.yml</code>或其他文件，涉及到本地图片的路径，源文件夹就是<code>source</code>。举个例子，假如你要修改你的logo，那么你可以把下载下来的logo.png放在<code>/source/medias</code>中，然后在<code>_config.yml</code>文件中找到logo，将其值改为<code>/medias/logo.png</code>，更多关于图片的问题，下文将会继续讲解。</p><h3 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h3><p>图片的存放大体上有两种方式，一种是本地，一种利用图床生成链接地址来直接访问，本地的话不再赘述，下面将向大家介绍一款十分好用的工具picgo来搭建你的博客图床</p><h4 id="picgo安装"><a href="#picgo安装" class="headerlink" title="picgo安装"></a>picgo安装</h4><p>请到picgo仓库中自行安装对应版本，<a href="https://github.com/Molunerfinn/PicGo">此处</a>为其仓库。</p><h4 id="picgo搭建github图床"><a href="#picgo搭建github图床" class="headerlink" title="picgo搭建github图床"></a>picgo搭建github图床</h4><p>此处以搭建github图床为例</p><ol><li>首先在你的github中创建一个放博客图片的仓库，此处举例命名为blog_image</li><li>然后点击右上角你的头像，再点击settings，进去后找到并点击Developer settings，再点Personal access tokens，如果你先前没有生成过token的话，点击Generate new token</li><li>输入密码后开始配置token，选择Expiration(有效日期)，下面的勾选，<strong>一定要勾选repo</strong>，推荐勾选write:packages、admin:org，然后点击Generate token，你的token就生成好了，<strong>请即刻复制下来</strong>，因为你之后无法再看到这个token.</li><li>在picgo主页中点击图床设置，再点github图床，填入设定好仓库名和token,cdn加速下面再讲，点击确定就设置好了</li><li>使用时在上传区传入图片后，会自动生成链接，将该链接放到博客或其他配置文件中即可。</li></ol><h4 id="图片分辨率过高"><a href="#图片分辨率过高" class="headerlink" title="图片分辨率过高"></a>图片分辨率过高</h4><p>如果你要使用的图片分辨率过高，或者换句话说，图片大于1M，这都会导致你加载图片过慢，此时推荐一个图片压缩神器<a href="https://www.picdiet.com/zh-cn">picdiet</a>，可在线压缩图片。</p><h3 id="文章标签问题"><a href="#文章标签问题" class="headerlink" title="文章标签问题"></a>文章标签问题</h3><p>一般来说，在写博客的时候，tag可以有多个，而categories一般只有一个，而在写多个tags时请看一下格式。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">tags:   <span class="token list punctuation">-</span> a  <span class="token list punctuation">-</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h3><p>可利用免费的jsdelivr来进行加速，如上面讲到的picgo图床，可在图床设置中的自定义域名中填入<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E4%BE%BF%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://cdn.jsdelivr.net/gh/用户名/仓库名，便可以了。</a></p><p>而在主题的设置中，可在matery下的<code>_config.yml</code>文件中找到jsDelivr，将#删掉，便可完成加速。但是要注意的是，配置了此项就代表着本地调试的时候，网站依然会去GitHub请求资源（原来的资源），<strong>本地调试的时候记得将此项配置注释或者删除掉</strong>。</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>请参考这篇Sky03大佬的博客<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-15">Hexo进阶之各种优化</a>，这里面还有很多其他技巧哦！</p><h2 id="自定义美化"><a href="#自定义美化" class="headerlink" title="自定义美化"></a>自定义美化</h2><p>请在阅读完主题的官方文档再来看这里</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>先从比较实用的功能讲起，matery的评论系统支持多种api的接入，此处以gittalk为例。</p><ol><li>首先点击右上角你的头像，再点击settings，进去后找到并点击Developer settings<del>(是不是有点似曾相识)</del>，然后点击OAuth Apps，接下来点击New OAuth Apps</li><li>在配置中，其他随便搞搞就行，<strong>重点是在Authorization callback URL这一栏中填入自己博客的域名或ip地址</strong>，如xxx.github.io(xxx为你的用户名)。</li><li>完成创建后会生成client id和client secret，将这两项复制，然后打开matery下的<code>_config.yml</code>文件，找到gittalk，按下面的配置就可以了</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">gitalk:  enable: true #true为打开  owner: xxx #github用户名  repo: xxx.github.io #  oauth:    clientId: xxxx #刚复制的    clientSecret: xxxx  admin: xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改封面图"><a href="#修改封面图" class="headerlink" title="修改封面图"></a>修改封面图</h3><p>鲁迅曾经说过，一个好的封面是博客的门面。这里介绍一下如何更换你的封面图，其实很简单，首先matery主题默认是轮播封面，一星期7天，每天一张。</p><p>打开主题下的<code>/source/medias/banner</code>文件夹，你会找到0123456等7张jpg，而这些就是你的封面，所以你只要下载你想要的图片到该文件夹中，并重命名为相应的名字即可。</p><p>如果你想自行修改图片轮播逻辑或图片读取路径，也可打开主题文件夹下的<code>/layout/_partial/bg-cover-content.ejs</code>自行操作。如果只想关掉轮播，只需到matery下的<code>_config.yml</code>文件中找到cover这一项，看注释修改即可。</p><pre><code>顺便说一下，_config.yml文件中还有很多可开关的功能，可自行摸索。</code></pre><h3 id="菜单栏透明"><a href="#菜单栏透明" class="headerlink" title="菜单栏透明"></a>菜单栏透明</h3><p>你是否因为菜单栏那一片绿色而在苦恼，你是否看到大佬们<del>(除我)</del>的博客那与封面融为一体的菜单栏而感到羡慕，这里我将教你如何变透明(bushi)。这也是很多美化博客貌似没讲到的内容，其实只要在<code>/source/medias/css/matery.css</code>中找到<code>.bg-color</code>一项，做以下修改即可。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #3fd9ff 0%<span class="token punctuation">,</span> #5637c6 100%<span class="token punctuation">)</span><span class="token punctuation">;</span> #颜色自行选择    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.7<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浏览器搞笑标题"><a href="#浏览器搞笑标题" class="headerlink" title="浏览器搞笑标题"></a>浏览器搞笑标题</h3><p>在主题文件夹下的<code>\source\js</code> 下新建一个 FunnyTitle.js 文件，填写如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 浏览器搞笑标题</span><span class="token keyword">var</span> OriginTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token keyword">var</span> titleTime<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"/funny.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'╭(°A°`)╮ 页面崩溃啦 ~'</span><span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>titleTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"/favicon.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'(ฅ>ω&lt;*ฅ) 噫又好啦 ~'</span> <span class="token operator">+</span> OriginTitle<span class="token punctuation">;</span>        titleTime <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*此代码为转载来源: Shawlon`s Blog作者: Tyzhao链接: https://www.yshawlon.cn/hexo-ge-ren-bo-ke-zhi-bo-ke-zhu-ti-mei-hua.html#toc-head/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题文件夹下的<code>layout\layout.ejs</code>文件中添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>浏览器搞笑标题<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/FunnyTitle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><p>如果你想要你的”老婆”做你博客的看板娘的话，那这个功能可太适合你了。</p><p>首先安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后如果你想从现有的模型库中获取的话则较为方便，模型库预览点击<a href="https://github.com/xiazeyu/live2d-widget-models">此处</a>，直接安装包即可，举个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在博客根目录下的<code>_config.yml</code>文件中，添加以下代码：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 注意缩进live2d:   enable: true   scriptFrom: local   model:     use: live2d-widget-model-shizuku #填模型名   display:     position: right #left或right     width: 180     height: 480   mobile:     show: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自己的不在库中的模型"><a href="#自己的不在库中的模型" class="headerlink" title="自己的不在库中的模型"></a>自己的不在库中的模型</h4><p>这里讲一下，如果你想用你自己有的模型来做看板娘该如何操作，其实就是将你的模型作为npm包发布出去，再自己install回来。</p><ol><li>先在你的模型文件夹中打开终端，键入<code>npm init</code>按提示填好信息，此处建议包名填<strong>live-widget-model-xxx</strong>,你就会发现多了package.json</li><li>在<a href="https://www.npmjs.com/">npm官网</a>注册一个npm账号,然后回到刚刚的模型文件夹中，键入<code>npm login</code>，输入用户名和密码，完成登录</li><li>键入<code>npm publish</code>上传包，出现+代表成功了。</li><li>然后在你的博客文件夹打开终端，用npm将你刚刚的那个包install回来，**注意：请将你模型中的model.json改为xxx.model.json(xxx为包名后的那个xxx，如shizuku)**，下回来的包会在<code>node_modules</code>中。然后把上面那个配置的model:use:的值改为live-widget-model-xxx即可。</li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>那么这篇教程到这里就结束，别看这篇教程中的一些话不是很长，但有些东西真的过了几天才解决的，毕竟网上的教程那么多，不可能每篇都能囊括到方方面面，很多问题真的是翻来翻去都找不到答案。哎….不说了，都是泪，这篇教程我已经就我所能将我遇到的问题和解决方法放了上去，希望能帮到你。</p><p>感谢你看到这里，也恭喜你拥有了算的上好看的博客网站啦（至少在我看来）！如果真的有看我这篇教程搭出了自己的博客网站的，欢迎在评论区发出链接给大家膜哦！求收藏，求关注，求转发<del>(一键三连)</del>，我们下篇再见。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo学习记录1(保姆级教程)</title>
      <link href="/2021/07/29/hexo1/"/>
      <url>/2021/07/29/hexo1/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-github-page-让你拥有你自己的博客网站"><a href="#hexo-github-page-让你拥有你自己的博客网站" class="headerlink" title="hexo+github page 让你拥有你自己的博客网站"></a>hexo+github page 让你拥有你自己的博客网站</h1><p>本文主要用于记录我搭建本博客网站的学习记录，要是刚好能帮到你，那真是不胜荣幸。电脑环境为<strong>ubuntu 20.04</strong>,虽win系统下大同小异，但仍建议参考别的基于win系统搭建的教程。</p><pre><code>声明：请以终端中报的提示为主，本教程中代码可能不完全适用，请谨慎食用。</code></pre><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>hexo 是一个基于nodejs 的快速生成静态博客的开源框架，支持Markdown和大多数Octopress插件，一个命令即可部署到GitHub页面、Giteee、Heroku等，强大的API，可无限扩展，拥有数百个主题和插件，其特点在于能极速渲染出静态页面。</p><h2 id="在本地服务器安装hexo"><a href="#在本地服务器安装hexo" class="headerlink" title="在本地服务器安装hexo"></a>在本地服务器安装hexo</h2><p><strong>请先打开终端</strong></p><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>nvm 是用于安装nodejs的工具，可用下面的命令来安装(可能需要梯子)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> https://raw.github.com/creationix/nvm/master/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示没有curl,可先按照终端给出的提示(或下面的代码)来安装curl工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>安装完nvm后只需一行代码搞定nodejs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nvm <span class="token function">install</span> stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm是用来安装hexo的(当然不止于此)，而npm的源又在国外，所以可换成淘宝源来加速(其他源也可)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org <span class="token comment">#换淘宝源</span><span class="token function">npm</span> config list <span class="token comment">#请勿省略</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>前置工作终于做完了，下一个就是你了，hexo！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在装完hexo，请先选择一个目录作为你放网站文件的目录，然后在此目录下打开终端，然后执行以下代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init MyHexoBlog <span class="token comment">#名字可换</span><span class="token builtin class-name">cd</span> MyHexoBlog <span class="token comment">#用cd命令切换到该目录下</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#请勿省略此行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后为了能在本地服务器进行预览，请安装以下依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>紧接着执行的是常用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#生成静态博客</span>hexo s <span class="token comment">#开始运行本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时打开 “<a href="http://localhost:4000/&quot;">http://localhost:4000/&quot;</a> 这个网址便可看到本地的预览了，此时你的本地网站已经初步搭建完成，博客使用的是自带的landscape主题，关于换主题应该要等到下篇博客再讲了..下面先讲如何让网站能被其他人访问呢。</p><h2 id="github-page牛逼"><a href="#github-page牛逼" class="headerlink" title="github page牛逼"></a>github page牛逼</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先介绍下<strong>github</strong>,这是全世界最大的开发者同性交友网站<del>(bushi)</del>,而github page是github提供的一个承载文字的平台，其实用github page也能直接搭出个人博客，但hexo能用很多很好看的开源主题(颜值即正义)，而且渲染起来也比较快。另外github page实际上不是完全免费的，而是有<em>300MB</em>的限额的，不过我认为搭个个人博客绰绰有余。</p><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>就正常注册，但注意github有时会进行限流，最好自备梯子，不然只能随缘，然后创建一个新仓库，仓库名请一定要命名为<strong>xxx.github.io</strong>(其中xxx为你github的用户名)，然后一定要创建的是<strong>公有仓库(public)！公有仓库(public)！公有仓库(public)！</strong>重要的事情说三遍。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>首先你需要有个git,在本教程中你只需要知道git这玩意是用来把你本地的代码送到github上的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> git-core <span class="token comment">#装git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>执行下面命令生成SSH公钥，这是为了让你的github仓库能接受你这台电脑(雾)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看终端上提示操作，大概需要敲三次回车后，便可生成id_rsa.pub文件,然后可用cat命令打开该文件(先切到其目录)，里面存放的便是公钥内容，一般以ssh-rsa开头，将其中内容复制下来，然后打开github,点击右上角的头像，然后点击setting(设置)，在左侧找到SSH and RPG keys(反正有SSH就完事了)，然后点击new ssh key,将复制的内容粘贴到下面的key中，然后取个title，点击下面的add就配置好了。(这一步较为冗长，但我懒得配图了，按文字描述的来应该没啥问题，有问题来找我┌(。Д。)┐ )<br>最后在终端中输入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hi<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那说明莫得问题了。</p><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>第一次配置git的同学看过来，在终端输入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"github用户名"</span> <span class="token comment">#记得换，别光ctrlcv啦</span><span class="token function">git</span> config --global user.email <span class="token string">"你注册的邮箱地址"</span>ssh-keygen -t rsa -C <span class="token string">"你注册的邮箱地址"</span> <span class="token comment">#生成个git的个人密钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置一下deploy-最后啦，别放弃"><a href="#配置一下deploy-最后啦，别放弃" class="headerlink" title="配置一下deploy(最后啦，别放弃)"></a>配置一下deploy(最后啦，别放弃)</h3><p>装个依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后请打开你放博客的文件夹(如我上面的Myhexoblog)，你会看到一个 <strong>_config.yml</strong> 文件，这是管理你网站全局的一个文件，用编辑器打开它，应该在末尾处，你会看到deploy的一些配置，请做出如下的修改:</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: 你之前创建的那个仓库的地址，如git@github.com:Wdstql&#x2F;Wdstql.github.io.git(此为ssh地址，如果直接复制http地址应该也可)  branch: main(改成main，因为现在github默认分支为main)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>很重要的一点是，<strong>冒号后面一定是接一个半角空格</strong>，别漏了。</p><h2 id="开冲"><a href="#开冲" class="headerlink" title="开冲"></a>开冲</h2><p>执行以下命令，便可将你的静态博客放到githubpage上让大家观摩啦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment">#建议时不时clean一下</span>hexo g <span class="token comment">#hexo d前必须先生成静态博客先</span>hexo d <span class="token comment">#deploy啦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后稍等一会就可以通过访问 <strong>“xxx.github.io”</strong> (xxx是你用户名)来看到你的博客网站啦！当然，如果你想换域名的话也可以去买一个，然后去网上搜别的教程来改，我这里因为我没改就不写了</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>最后讲一下每次改动的步骤吧，一般都是在改动之后，clean一下，然后hexo s在本地先预览，最后等所有改动都做好，再hexo g+hexo d推送到网站上，这大概就是我的工作流程吧。至于换主题嘛，下篇在说啦 &#x1F606;。如果本篇博客中的某个地方有任何bug或者有什么说的不够严谨的地方可以随时来call我。</p><p>感谢你看到这里，也恭喜你拥有了一个可能还不怎么好看但起码是自己做的一个有模有样的博客网站！求收藏，求关注，求转发<del>(一键三连)</del>，我们下篇再见。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2021/07/28/hello-world/"/>
      <url>/2021/07/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>第0篇博客，不知道写啥，就碎碎念一下好了</p><h1 id="起啥标题呢……"><a href="#起啥标题呢……" class="headerlink" title="起啥标题呢……."></a>起啥标题呢…….</h1><h2 id="介绍一下这个网站"><a href="#介绍一下这个网站" class="headerlink" title="介绍一下这个网站"></a>介绍一下这个网站</h2><p>这个是我花了几天时间<del>（指中途经常去摸鱼）</del>搞的一个博客网站,因为懒(mei)得(qian)买域名和租服务器，所以去看了一堆教程，利用hexo+github page整了这个静态博客网站，上面应该会放点我的学习笔记，想分享的东西吧….(提前咕咕咕</p><h2 id="为啥做这个网站"><a href="#为啥做这个网站" class="headerlink" title="为啥做这个网站"></a>为啥做这个网站</h2><p>其实一直以来都有这个想法，只是一直在搞学(you)业(xi)，谢谢这个暑假鬼那么难排的科一考试，让我练不了科二，于是有了一堆无聊的时间，正好看了up主程序员鱼皮的这个视频<a href="https://www.bilibili.com/video/BV11V411p7vf?from=search&seid=7657391929573412838">放个大招，5 分钟让所有人拥有个人网站！程序员保姆级教学，不写代码</a>，于是想试一下，然后发现了这个webify是限时一个月免费，吝啬的我决定上网白嫖！！<br>讲点正经的，我蛮想通过这个博客网站来进行技术分享和交流的，如果能在帮到我自己的同时帮到看博客的你，那就太好了。</p><h2 id="网站现状"><a href="#网站现状" class="headerlink" title="网站现状"></a>网站现状</h2><p>我现在用的matery这个主题，其实大部分时间都在做一些美化了，但是我又不懂前端，只能看着技术文档和网上的教程照猫画虎的改，目前的话关键的留言箱还没做，live2d的话模型库里没有啥我钟意的模型，就懒得放了，至于音乐播放器么….真的会有人看博客的时候听音乐吗(快进到上课看博客忘关声音社死hhh)，其实还有很多地方能美化，也希望看博客的米娜桑能bangbang我，跟我提多点建议。还有我这个博客也是支持RSS订阅的，如果你不懂RSS的话，可以看看这篇文章<a href="https://www.zhihu.com/topic/19551894/hot">知乎关于RSS</a>。如果有愿意和我互加友链可以随时来dd我哦(๑•̀ㅂ•́)و✧。</p><h2 id="还有啥要讲呀"><a href="#还有啥要讲呀" class="headerlink" title="还有啥要讲呀"></a>还有啥要讲呀</h2><p>哦，我好像忘了介绍我自己，那么想知道我是谁的，请点上面菜单的关于(其实那也没写多少我的信息)。Em….再讲讲我这个名字吧<del>(好突兀)</del>，其实也是由我一个老友而来，我用的顺手了就一直用下来了，ヽ(✿ﾟ▽ﾟ)ノ。</p><p>没啥了，那就结尾吧，看到这的人恭喜你浪费了生命中宝贵的两分钟来看我这堆碎碎念，哦，最后预告我下篇博客应该要写这个博客网站的搭建记录吧，感谢你读到现在！</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
