<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode刷题day1</title>
      <link href="/2021/08/12/leetcode1/"/>
      <url>/2021/08/12/leetcode1/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode今日两题-动态规划（1）"><a href="#leetcode今日两题-动态规划（1）" class="headerlink" title="leetcode今日两题-动态规划（1）"></a>leetcode今日两题-动态规划（1）</h1><h2 id="313、超级丑数"><a href="#313、超级丑数" class="headerlink" title="313、超级丑数"></a>313、超级丑数</h2><p>原题链接：”<a href="https://leetcode-cn.com/problems/super-ugly-number/&quot;">https://leetcode-cn.com/problems/super-ugly-number/&quot;</a></p><p>本题此处提供两种解法，<strong>Key:新的丑数=旧的丑数Xprimes序列中的数</strong>。</p><h3 id="1-优先队列-哈希集合"><a href="#1-优先队列-哈希集合" class="headerlink" title="1.优先队列+哈希集合"></a>1.优先队列+哈希集合</h3><ol><li>先将1加入最小堆</li><li>然后将堆顶元素弹出</li><li>用该元素乘上primes中所有数并将其加入堆中</li><li>由于会出现重复，所以使用哈希集合来去重</li><li>重复以上234步骤n次</li></ol><p>(ps:也可以用底层为红黑树的set来一步到位，但效率较差，经比较大概比以上方法慢了一倍)</p><p>以下为代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthSuperUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> primes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_set<span class="token operator">&lt;</span>ll<span class="token operator">></span>s<span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>ll<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>ll<span class="token operator">></span> <span class="token operator">></span>q<span class="token punctuation">;</span><span class="token comment">//最小堆，记得greater那要留多个空格</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll cnt<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cnt<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span>primes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ll temp<span class="token operator">=</span>cnt<span class="token operator">*</span>e<span class="token punctuation">;</span><span class="token comment">//用long long是因为这一步有可能爆精</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//哈希集合的find方法，找不到即返回s.end()</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度约为O(mnlogn)</p><h3 id="2-动态规划（非严谨）"><a href="#2-动态规划（非严谨）" class="headerlink" title="2.动态规划（非严谨）"></a>2.动态规划（非严谨）</h3><p><strong>核心：用multi数组决定要序列中的数要乘哪个旧丑数</strong></p><p>为了保证预备丑数序列的递增性，所以要用尽量小的旧丑数去乘primes中的数，但之前生成过丑数的组合不能再相乘，因此其要向前进一，multi数组储存的是primes数组中对应数字在这次计算中需要相乘的旧丑数的index。<br>同时由于丑数序列的递增性，如果出现重复必然是与前一个数重复，所以通过简单的判断即可排除重复情况<br>下面是代码实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthSuperUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> primes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">></span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">></span><span class="token function">multi</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ll minv<span class="token operator">=</span>INT_MAX<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>            <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp<span class="token operator">=</span>dp<span class="token punctuation">[</span>multi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//旧丑数乘primes中数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>minv<span class="token operator">></span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//找最小值</span>                    minv<span class="token operator">=</span>temp<span class="token punctuation">;</span>pos<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//获取生成该丑数对应primes中的数字</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>minv<span class="token punctuation">)</span><span class="token comment">//避免重复</span>                dp<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minv<span class="token punctuation">;</span>            multi<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//关键</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经检验，该方法时间复杂度为O(mn)，但实测比第一种快了好几倍。</p><h2 id="446、等差数列划分"><a href="#446、等差数列划分" class="headerlink" title="446、等差数列划分"></a>446、等差数列划分</h2><p>原题链接：”<a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/&quot;">https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/&quot;</a></p><h3 id="序列dp"><a href="#序列dp" class="headerlink" title="序列dp"></a>序列dp</h3><p><strong>弱等差子序列</strong>：一个序列中至少有<strong>二个元素</strong>，并且任意两个相邻元素之差相同。（显然任何一对元素都满足）</p><p>状态描述：dp[i][d]表示<strong>以nums[i]为结尾，公差为d</strong>的弱等差子序列个数。dp[i]应该是一个「集合」，该集合记录下了所有以nums[i]为结尾，差值为所有情况的子序列的个数。</p><p>推导：设i,j(j &lt; i)来做二重循环，其中nums[i]为子序列结尾，nums[j]为倒数第二。循环的目的是对于每个i,枚举区间[0, i - 1]的所有数。<strong>枚举当前位置前面的所有位置的目的，是为了找到当前位置的数，能够接在哪一个位置的后面，形成序列</strong><br>对于每个i,j，记d=nums[i]-nums[j],需要去找dp[j][d]，因为将nums[i]插到以nums[j]结尾的子序列中，构成以nums[i]为结尾的子序列，再nums[j],nums[i]也构成一个弱等差子序列，因此得出转移方程：dp[i][d]+=dp[j][d]+1;<br>而因为差值d有可能会过大爆精，但差值本身的数量是有限的，因此选用longlong和哈希map,至于答案便是递推过程中dp[j][d]的求和<br>代码实现如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ll <span class="token function">numberOfArithmeticSlices</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ll ans<span class="token punctuation">&#123;</span><span class="token number">0LL</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>unordered_map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">dp</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//哈希map快</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ll d<span class="token operator">=</span><span class="token number">1LL</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//可能爆精</span>                <span class="token keyword">auto</span> it<span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找是否有dp[j][d]</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cnt<span class="token operator">=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span>                <span class="token keyword">else</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>cnt<span class="token punctuation">;</span><span class="token comment">//加和答案</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//转移方程</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为O(n^2).</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo学习记录2(帅，是一辈子的事)</title>
      <link href="/2021/08/03/matery/"/>
      <url>/2021/08/03/matery/</url>
      
        <content type="html"><![CDATA[<p><del>全文建议配合梯子食用</del></p><h1 id="hexo主题美化，让你的博客焕然一新"><a href="#hexo主题美化，让你的博客焕然一新" class="headerlink" title="hexo主题美化，让你的博客焕然一新"></a>hexo主题美化，让你的博客焕然一新</h1><p>上篇博客中，我讲完了如何利用hexo和githubpage初步在你的ubuntu上搭好一个博客网站，但这样搭出来的网站显然不太符合我们代码人的口味(可能只有我不太喜欢？)。而这篇博客就是教你让你的hexo换个主题，并且做yi点点自定义的美化，本文选用的博客的主题是<strong>matery</strong>，也是我的博客正在使用的主题。</p><h2 id="matery主题"><a href="#matery主题" class="headerlink" title="matery主题"></a>matery主题</h2><p>matery主题是一个采用<code>Material Design</code> 和响应式设计的 Hexo 博客主题，这是<a href="https://github.com/blinkfox/hexo-theme-matery">它的github仓库地址</a>，点击<a href="https://wdstql.github.io/">这里</a>查看演示效果(其实就是我的主页)。</p><h3 id="安装与切换主题"><a href="#安装与切换主题" class="headerlink" title="安装与切换主题"></a>安装与切换主题</h3><p>在你博客根目录下的theme文件夹打开终端，键入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后，你的theme文件夹下就会多出一个hexo-theme-matery的文件夹，切换主题也很简单，只需打开博客根目录下的<code>_config.yml</code>文件，找到theme，将它的值由landscape修改为hexo-theme-matery。</p><h3 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h3><p>打开根目录下的<code>_config.yml</code>文件(主题文件夹和博客根目录下各有一个同名文件，请区分开)，修改title，subtitle为自己想要的，并自行查看效果，language改为zh-CN。</p><p>接下来的一系列对于该主题的基础配置，请自行查阅主题作者写的官方文档，不知道比我写得高哪里去了，点击<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">此处</a>可查。下文只讲我在查阅该文档时遇到的问题以及一些其他的个性化配置。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><pre><code>本处内容是基于我浅薄的认识写的</code></pre><p>首先先讲一下matery主题文件夹下各个文件和文件夹的作用(其实就讲两个).最重要的是<code>_config.yml</code>文件,负责管理网站的总设置，用于添加或开关网站中的某功能。一个是<code>layout</code>，管理着网站各个部分的格式和结构.一个是<code>source</code>,存放着对网站各处的美化和<strong>本地图片的源文件</strong>。也就是说你在<code>_config.yml</code>或其他文件，涉及到本地图片的路径，源文件夹就是<code>source</code>。举个例子，假如你要修改你的logo，那么你可以把下载下来的logo.png放在<code>/source/medias</code>中，然后在<code>_config.yml</code>文件中找到logo，将其值改为<code>/medias/logo.png</code>，更多关于图片的问题，下文将会继续讲解。</p><h3 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h3><p>图片的存放大体上有两种方式，一种是本地，一种利用图床生成链接地址来直接访问，本地的话不再赘述，下面将向大家介绍一款十分好用的工具picgo来搭建你的博客图床</p><h4 id="picgo安装"><a href="#picgo安装" class="headerlink" title="picgo安装"></a>picgo安装</h4><p>请到picgo仓库中自行安装对应版本，<a href="https://github.com/Molunerfinn/PicGo">此处</a>为其仓库。</p><h4 id="picgo搭建github图床"><a href="#picgo搭建github图床" class="headerlink" title="picgo搭建github图床"></a>picgo搭建github图床</h4><p>此处以搭建github图床为例</p><ol><li>首先在你的github中创建一个放博客图片的仓库，此处举例命名为blog_image</li><li>然后点击右上角你的头像，再点击settings，进去后找到并点击Developer settings，再点Personal access tokens，如果你先前没有生成过token的话，点击Generate new token</li><li>输入密码后开始配置token，选择Expiration(有效日期)，下面的勾选，<strong>一定要勾选repo</strong>，推荐勾选write:packages、admin:org，然后点击Generate token，你的token就生成好了，<strong>请即刻复制下来</strong>，因为你之后无法再看到这个token.</li><li>在picgo主页中点击图床设置，再点github图床，填入设定好仓库名和token,cdn加速下面再讲，点击确定就设置好了</li><li>使用时在上传区传入图片后，会自动生成链接，将该链接放到博客或其他配置文件中即可。</li></ol><h4 id="图片分辨率过高"><a href="#图片分辨率过高" class="headerlink" title="图片分辨率过高"></a>图片分辨率过高</h4><p>如果你要使用的图片分辨率过高，或者换句话说，图片大于1M，这都会导致你加载图片过慢，此时推荐一个图片压缩神器<a href="https://www.picdiet.com/zh-cn">picdiet</a>，可在线压缩图片。</p><h3 id="文章标签问题"><a href="#文章标签问题" class="headerlink" title="文章标签问题"></a>文章标签问题</h3><p>一般来说，在写博客的时候，tag可以有多个，而categories一般只有一个，而在写多个tags时请看一下格式。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">tags:   <span class="token list punctuation">-</span> a  <span class="token list punctuation">-</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h3><p>可利用免费的jsdelivr来进行加速，如上面讲到的picgo图床，可在图床设置中的自定义域名中填入<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E4%BE%BF%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">https://cdn.jsdelivr.net/gh/用户名/仓库名，便可以了。</a></p><p>而在主题的设置中，可在matery下的<code>_config.yml</code>文件中找到jsDelivr，将#删掉，便可完成加速。但是要注意的是，配置了此项就代表着本地调试的时候，网站依然会去GitHub请求资源（原来的资源），<strong>本地调试的时候记得将此项配置注释或者删除掉</strong>。</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>请参考这篇Sky03大佬的博客<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-15">Hexo进阶之各种优化</a>，这里面还有很多其他技巧哦！</p><h2 id="自定义美化"><a href="#自定义美化" class="headerlink" title="自定义美化"></a>自定义美化</h2><p>请在阅读完主题的官方文档再来看这里</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>先从比较实用的功能讲起，matery的评论系统支持多种api的接入，此处以gittalk为例。</p><ol><li>首先点击右上角你的头像，再点击settings，进去后找到并点击Developer settings<del>(是不是有点似曾相识)</del>，然后点击OAuth Apps，接下来点击New OAuth Apps</li><li>在配置中，其他随便搞搞就行，<strong>重点是在Authorization callback URL这一栏中填入自己博客的域名或ip地址</strong>，如xxx.github.io(xxx为你的用户名)。</li><li>完成创建后会生成client id和client secret，将这两项复制，然后打开matery下的<code>_config.yml</code>文件，找到gittalk，按下面的配置就可以了</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">gitalk:  enable: true #true为打开  owner: xxx #github用户名  repo: xxx.github.io #  oauth:    clientId: xxxx #刚复制的    clientSecret: xxxx  admin: xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改封面图"><a href="#修改封面图" class="headerlink" title="修改封面图"></a>修改封面图</h3><p>鲁迅曾经说过，一个好的封面是博客的门面。这里介绍一下如何更换你的封面图，其实很简单，首先matery主题默认是轮播封面，一星期7天，每天一张。</p><p>打开主题下的<code>/source/medias/banner</code>文件夹，你会找到0123456等7张jpg，而这些就是你的封面，所以你只要下载你想要的图片到该文件夹中，并重命名为相应的名字即可。</p><p>如果你想自行修改图片轮播逻辑或图片读取路径，也可打开主题文件夹下的<code>/layout/_partial/bg-cover-content.ejs</code>自行操作。如果只想关掉轮播，只需到matery下的<code>_config.yml</code>文件中找到cover这一项，看注释修改即可。</p><pre><code>顺便说一下，_config.yml文件中还有很多可开关的功能，可自行摸索。</code></pre><h3 id="菜单栏透明"><a href="#菜单栏透明" class="headerlink" title="菜单栏透明"></a>菜单栏透明</h3><p>你是否因为菜单栏那一片绿色而在苦恼，你是否看到大佬们<del>(除我)</del>的博客那与封面融为一体的菜单栏而感到羡慕，这里我将教你如何变透明(bushi)。这也是很多美化博客貌似没讲到的内容，其实只要在<code>/source/medias/css/matery.css</code>中找到<code>.bg-color</code>一项，做以下修改即可。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #3fd9ff 0%<span class="token punctuation">,</span> #5637c6 100%<span class="token punctuation">)</span><span class="token punctuation">;</span> #颜色自行选择    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.7<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浏览器搞笑标题"><a href="#浏览器搞笑标题" class="headerlink" title="浏览器搞笑标题"></a>浏览器搞笑标题</h3><p>在主题文件夹下的<code>\source\js</code> 下新建一个 FunnyTitle.js 文件，填写如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 浏览器搞笑标题</span><span class="token keyword">var</span> OriginTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token keyword">var</span> titleTime<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"/funny.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'╭(°A°`)╮ 页面崩溃啦 ~'</span><span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>titleTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"/favicon.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'(ฅ>ω&lt;*ฅ) 噫又好啦 ~'</span> <span class="token operator">+</span> OriginTitle<span class="token punctuation">;</span>        titleTime <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*此代码为转载来源: Shawlon`s Blog作者: Tyzhao链接: https://www.yshawlon.cn/hexo-ge-ren-bo-ke-zhi-bo-ke-zhu-ti-mei-hua.html#toc-head/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题文件夹下的<code>layout\layout.ejs</code>文件中添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>浏览器搞笑标题<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/FunnyTitle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><p>如果你想要你的”老婆”做你博客的看板娘的话，那这个功能可太适合你了。</p><p>首先安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后如果你想从现有的模型库中获取的话则较为方便，模型库预览点击<a href="https://github.com/xiazeyu/live2d-widget-models">此处</a>，直接安装包即可，举个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在博客根目录下的<code>_config.yml</code>文件中，添加以下代码：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 注意缩进live2d:   enable: true   scriptFrom: local   model:     use: live2d-widget-model-shizuku #填模型名   display:     position: right #left或right     width: 180     height: 480   mobile:     show: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自己的不在库中的模型"><a href="#自己的不在库中的模型" class="headerlink" title="自己的不在库中的模型"></a>自己的不在库中的模型</h4><p>这里讲一下，如果你想用你自己有的模型来做看板娘该如何操作，其实就是将你的模型作为npm包发布出去，再自己install回来。</p><ol><li>先在你的模型文件夹中打开终端，键入<code>npm init</code>按提示填好信息，此处建议包名填<strong>live-widget-model-xxx</strong>,你就会发现多了package.json</li><li>在<a href="https://www.npmjs.com/">npm官网</a>注册一个npm账号,然后回到刚刚的模型文件夹中，键入<code>npm login</code>，输入用户名和密码，完成登录</li><li>键入<code>npm publish</code>上传包，出现+代表成功了。</li><li>然后在你的博客文件夹打开终端，用npm将你刚刚的那个包install回来，**注意：请将你模型中的model.json改为xxx.model.json(xxx为包名后的那个xxx，如shizuku)**，下回来的包会在<code>node_modules</code>中。然后把上面那个配置的model:use:的值改为live-widget-model-xxx即可。</li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>那么这篇教程到这里就结束，别看这篇教程中的一些话不是很长，但有些东西真的过了几天才解决的，毕竟网上的教程那么多，不可能每篇都能囊括到方方面面，很多问题真的是翻来翻去都找不到答案。哎….不说了，都是泪，这篇教程我已经就我所能将我遇到的问题和解决方法放了上去，希望能帮到你。</p><p>感谢你看到这里，也恭喜你拥有了算的上好看的博客网站啦（至少在我看来）！如果真的有看我这篇教程搭出了自己的博客网站的，欢迎在评论区发出链接给大家膜哦！求收藏，求关注，求转发<del>(一键三连)</del>，我们下篇再见。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo学习记录1(保姆级教程)</title>
      <link href="/2021/07/29/hexo1/"/>
      <url>/2021/07/29/hexo1/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-github-page-让你拥有你自己的博客网站"><a href="#hexo-github-page-让你拥有你自己的博客网站" class="headerlink" title="hexo+github page 让你拥有你自己的博客网站"></a>hexo+github page 让你拥有你自己的博客网站</h1><p>本文主要用于记录我搭建本博客网站的学习记录，要是刚好能帮到你，那真是不胜荣幸。电脑环境为<strong>ubuntu 20.04</strong>,虽win系统下大同小异，但仍建议参考别的基于win系统搭建的教程。</p><pre><code>声明：请以终端中报的提示为主，本教程中代码可能不完全适用，请谨慎食用。</code></pre><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>hexo 是一个基于nodejs 的快速生成静态博客的开源框架，支持Markdown和大多数Octopress插件，一个命令即可部署到GitHub页面、Giteee、Heroku等，强大的API，可无限扩展，拥有数百个主题和插件，其特点在于能极速渲染出静态页面。</p><h2 id="在本地服务器安装hexo"><a href="#在本地服务器安装hexo" class="headerlink" title="在本地服务器安装hexo"></a>在本地服务器安装hexo</h2><p><strong>请先打开终端</strong></p><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>nvm 是用于安装nodejs的工具，可用下面的命令来安装(可能需要梯子)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> https://raw.github.com/creationix/nvm/master/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示没有curl,可先按照终端给出的提示(或下面的代码)来安装curl工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>安装完nvm后只需一行代码搞定nodejs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nvm <span class="token function">install</span> stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm是用来安装hexo的(当然不止于此)，而npm的源又在国外，所以可换成淘宝源来加速(其他源也可)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org <span class="token comment">#换淘宝源</span><span class="token function">npm</span> config list <span class="token comment">#请勿省略</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>前置工作终于做完了，下一个就是你了，hexo！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在装完hexo，请先选择一个目录作为你放网站文件的目录，然后在此目录下打开终端，然后执行以下代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init MyHexoBlog <span class="token comment">#名字可换</span><span class="token builtin class-name">cd</span> MyHexoBlog <span class="token comment">#用cd命令切换到该目录下</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#请勿省略此行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后为了能在本地服务器进行预览，请安装以下依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>紧接着执行的是常用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#生成静态博客</span>hexo s <span class="token comment">#开始运行本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时打开 “<a href="http://localhost:4000/&quot;">http://localhost:4000/&quot;</a> 这个网址便可看到本地的预览了，此时你的本地网站已经初步搭建完成，博客使用的是自带的landscape主题，关于换主题应该要等到下篇博客再讲了..下面先讲如何让网站能被其他人访问呢。</p><h2 id="github-page牛逼"><a href="#github-page牛逼" class="headerlink" title="github page牛逼"></a>github page牛逼</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先介绍下<strong>github</strong>,这是全世界最大的开发者同性交友网站<del>(bushi)</del>,而github page是github提供的一个承载文字的平台，其实用github page也能直接搭出个人博客，但hexo能用很多很好看的开源主题(颜值即正义)，而且渲染起来也比较快。另外github page实际上不是完全免费的，而是有<em>300MB</em>的限额的，不过我认为搭个个人博客绰绰有余。</p><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>就正常注册，但注意github有时会进行限流，最好自备梯子，不然只能随缘，然后创建一个新仓库，仓库名请一定要命名为<strong>xxx.github.io</strong>(其中xxx为你github的用户名)，然后一定要创建的是<strong>公有仓库(public)！公有仓库(public)！公有仓库(public)！</strong>重要的事情说三遍。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>首先你需要有个git,在本教程中你只需要知道git这玩意是用来把你本地的代码送到github上的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> git-core <span class="token comment">#装git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>执行下面命令生成SSH公钥，这是为了让你的github仓库能接受你这台电脑(雾)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看终端上提示操作，大概需要敲三次回车后，便可生成id_rsa.pub文件,然后可用cat命令打开该文件(先切到其目录)，里面存放的便是公钥内容，一般以ssh-rsa开头，将其中内容复制下来，然后打开github,点击右上角的头像，然后点击setting(设置)，在左侧找到SSH and RPG keys(反正有SSH就完事了)，然后点击new ssh key,将复制的内容粘贴到下面的key中，然后取个title，点击下面的add就配置好了。(这一步较为冗长，但我懒得配图了，按文字描述的来应该没啥问题，有问题来找我┌(。Д。)┐ )<br>最后在终端中输入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hi<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那说明莫得问题了。</p><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>第一次配置git的同学看过来，在终端输入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"github用户名"</span> <span class="token comment">#记得换，别光ctrlcv啦</span><span class="token function">git</span> config --global user.email <span class="token string">"你注册的邮箱地址"</span>ssh-keygen -t rsa -C <span class="token string">"你注册的邮箱地址"</span> <span class="token comment">#生成个git的个人密钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置一下deploy-最后啦，别放弃"><a href="#配置一下deploy-最后啦，别放弃" class="headerlink" title="配置一下deploy(最后啦，别放弃)"></a>配置一下deploy(最后啦，别放弃)</h3><p>装个依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后请打开你放博客的文件夹(如我上面的Myhexoblog)，你会看到一个 <strong>_config.yml</strong> 文件，这是管理你网站全局的一个文件，用编辑器打开它，应该在末尾处，你会看到deploy的一些配置，请做出如下的修改:</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: 你之前创建的那个仓库的地址，如git@github.com:Wdstql&#x2F;Wdstql.github.io.git(此为ssh地址，如果直接复制http地址应该也可)  branch: main(改成main，因为现在github默认分支为main)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>很重要的一点是，<strong>冒号后面一定是接一个半角空格</strong>，别漏了。</p><h2 id="开冲"><a href="#开冲" class="headerlink" title="开冲"></a>开冲</h2><p>执行以下命令，便可将你的静态博客放到githubpage上让大家观摩啦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment">#建议时不时clean一下</span>hexo g <span class="token comment">#hexo d前必须先生成静态博客先</span>hexo d <span class="token comment">#deploy啦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后稍等一会就可以通过访问 <strong>“xxx.github.io”</strong> (xxx是你用户名)来看到你的博客网站啦！当然，如果你想换域名的话也可以去买一个，然后去网上搜别的教程来改，我这里因为我没改就不写了</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>最后讲一下每次改动的步骤吧，一般都是在改动之后，clean一下，然后hexo s在本地先预览，最后等所有改动都做好，再hexo g+hexo d推送到网站上，这大概就是我的工作流程吧。至于换主题嘛，下篇在说啦 &#x1F606;。如果本篇博客中的某个地方有任何bug或者有什么说的不够严谨的地方可以随时来call我。</p><p>感谢你看到这里，也恭喜你拥有了一个可能还不怎么好看但起码是自己做的一个有模有样的博客网站！求收藏，求关注，求转发<del>(一键三连)</del>，我们下篇再见。</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2021/07/28/hello-world/"/>
      <url>/2021/07/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>第0篇博客，不知道写啥，就碎碎念一下好了</p><h1 id="起啥标题呢……"><a href="#起啥标题呢……" class="headerlink" title="起啥标题呢……."></a>起啥标题呢…….</h1><h2 id="介绍一下这个网站"><a href="#介绍一下这个网站" class="headerlink" title="介绍一下这个网站"></a>介绍一下这个网站</h2><p>这个是我花了几天时间<del>（指中途经常去摸鱼）</del>搞的一个博客网站,因为懒(mei)得(qian)买域名和租服务器，所以去看了一堆教程，利用hexo+github page整了这个静态博客网站，上面应该会放点我的学习笔记，想分享的东西吧….(提前咕咕咕</p><h2 id="为啥做这个网站"><a href="#为啥做这个网站" class="headerlink" title="为啥做这个网站"></a>为啥做这个网站</h2><p>其实一直以来都有这个想法，只是一直在搞学(you)业(xi)，谢谢这个暑假鬼那么难排的科一考试，让我练不了科二，于是有了一堆无聊的时间，正好看了up主程序员鱼皮的这个视频<a href="https://www.bilibili.com/video/BV11V411p7vf?from=search&seid=7657391929573412838">放个大招，5 分钟让所有人拥有个人网站！程序员保姆级教学，不写代码</a>，于是想试一下，然后发现了这个webify是限时一个月免费，吝啬的我决定上网白嫖！！<br>讲点正经的，我蛮想通过这个博客网站来进行技术分享和交流的，如果能在帮到我自己的同时帮到看博客的你，那就太好了。</p><h2 id="网站现状"><a href="#网站现状" class="headerlink" title="网站现状"></a>网站现状</h2><p>我现在用的matery这个主题，其实大部分时间都在做一些美化了，但是我又不懂前端，只能看着技术文档和网上的教程照猫画虎的改，目前的话关键的留言箱还没做，live2d的话模型库里没有啥我钟意的模型，就懒得放了，至于音乐播放器么….真的会有人看博客的时候听音乐吗(快进到上课看博客忘关声音社死hhh)，其实还有很多地方能美化，也希望看博客的米娜桑能bangbang我，跟我提多点建议。还有我这个博客也是支持RSS订阅的，如果你不懂RSS的话，可以看看这篇文章<a href="https://www.zhihu.com/topic/19551894/hot">知乎关于RSS</a>。如果有愿意和我互加友链可以随时来dd我哦(๑•̀ㅂ•́)و✧。</p><h2 id="还有啥要讲呀"><a href="#还有啥要讲呀" class="headerlink" title="还有啥要讲呀"></a>还有啥要讲呀</h2><p>哦，我好像忘了介绍我自己，那么想知道我是谁的，请点上面菜单的关于(其实那也没写多少我的信息)。Em….再讲讲我这个名字吧<del>(好突兀)</del>，其实也是由我一个老友而来，我用的顺手了就一直用下来了，ヽ(✿ﾟ▽ﾟ)ノ。</p><p>没啥了，那就结尾吧，看到这的人恭喜你浪费了生命中宝贵的两分钟来看我这堆碎碎念，哦，最后预告我下篇博客应该要写这个博客网站的搭建记录吧，感谢你读到现在！</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
